// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4mp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "t4mp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class PacketDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Packet>
     _instance;
} _Packet_default_instance_;
class ConnectAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConnectAck>
     _instance;
} _ConnectAck_default_instance_;
class PlayerSnapDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerSnap>
     _instance;
} _PlayerSnap_default_instance_;
class ServerSnap_PlayerData_WeaponWheelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerSnap_PlayerData_WeaponWheel>
     _instance;
} _ServerSnap_PlayerData_WeaponWheel_default_instance_;
class ServerSnap_PlayerDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerSnap_PlayerData>
     _instance;
} _ServerSnap_PlayerData_default_instance_;
class ServerSnapDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerSnap>
     _instance;
} _ServerSnap_default_instance_;

namespace protobuf_t4mp_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, player_snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, server_snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, connect_ack_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectAck, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, viewx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, viewy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, walk_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, walk_backward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, walk_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, walk_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, jump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, crouch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, fire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, fire_hold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, fire_hold_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, fire_release_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, fire_release_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, weapon_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, weapon_switch_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, weapon_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSnap, packet_sequence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bwarclub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_bow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bow_normal_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bow_explosive_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bow_poison_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_tekbow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, tekbow_normalammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, tekbow_explosiveammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, tekbow_posionammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_spikegrenade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, spikegrenade_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_pistol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, pistol_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_shotgun_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, shotgun_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_flecheete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, fleechete_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, minigun_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_rocketlauncher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, rocket_ammo1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, rocket_ammo2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, rocket_ammo3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_plasmacannon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, plasma_ammo1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, plasma_ammo2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, plasma_ammo3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_flamethrower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, flamethrower_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_spidermine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, spidermine_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_gravitygun_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, gravitygun_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, gravitygun_ammo2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_darkmatter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, darkmatter_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, bhas_crossbow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, crossbow_normal_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, crossbow_explosive_ammo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData_WeaponWheel, crossbow_poison_ammo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, viewx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, viewy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, walk_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, walk_backward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, walk_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, walk_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, jump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, crouch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, fire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, fire_hold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, fire_hold_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, fire_release_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, fire_release_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, max_health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, current_health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, weapon_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, weapon_switch_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, weapon_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, weapons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap_PlayerData, death_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSnap, packet_sequence_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Packet)},
  { 9, -1, sizeof(ConnectAck)},
  { 15, -1, sizeof(PlayerSnap)},
  { 40, -1, sizeof(ServerSnap_PlayerData_WeaponWheel)},
  { 84, -1, sizeof(ServerSnap_PlayerData)},
  { 113, -1, sizeof(ServerSnap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Packet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConnectAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerSnap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerSnap_PlayerData_WeaponWheel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerSnap_PlayerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerSnap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "t4mp.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Packet_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Packet_default_instance_);_ConnectAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConnectAck_default_instance_);_PlayerSnap_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerSnap_default_instance_);_ServerSnap_PlayerData_WeaponWheel_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerSnap_PlayerData_WeaponWheel_default_instance_);_ServerSnap_PlayerData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerSnap_PlayerData_default_instance_);_ServerSnap_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerSnap_default_instance_);_Packet_default_instance_._instance.get_mutable()->player_snapshot_ = const_cast< ::PlayerSnap*>(
      ::PlayerSnap::internal_default_instance());
  _Packet_default_instance_._instance.get_mutable()->server_snapshot_ = const_cast< ::ServerSnap*>(
      ::ServerSnap::internal_default_instance());
  _Packet_default_instance_._instance.get_mutable()->connect_ack_ = const_cast< ::ConnectAck*>(
      ::ConnectAck::internal_default_instance());
  _ServerSnap_PlayerData_default_instance_._instance.get_mutable()->weapons_ = const_cast< ::ServerSnap_PlayerData_WeaponWheel*>(
      ::ServerSnap_PlayerData_WeaponWheel::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nt4mp.proto\"\335\001\n\006Packet\022\032\n\004type\030\001 \001(\0162\014."
      "Packet.Type\022$\n\017player_snapshot\030\002 \001(\0132\013.P"
      "layerSnap\022$\n\017server_snapshot\030\003 \001(\0132\013.Ser"
      "verSnap\022 \n\013connect_ack\030\004 \001(\0132\013.ConnectAc"
      "k\"I\n\004Type\022\013\n\007invalid\020\000\022\022\n\016client_connect"
      "\020\001\022\017\n\013server_snap\020\002\022\017\n\013client_snap\020\003\"\033\n\n"
      "ConnectAck\022\r\n\005index\030\001 \001(\005\"\210\003\n\nPlayerSnap"
      "\022\t\n\001X\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\022\t\n\001Z\030\003 \001(\002\022\r\n\005Vie"
      "wX\030\004 \001(\002\022\r\n\005ViewY\030\005 \001(\002\022\024\n\014Walk_forward\030"
      "\006 \001(\010\022\025\n\rWalk_backward\030\007 \001(\010\022\021\n\tWalk_lef"
      "t\030\010 \001(\010\022\022\n\nWalk_right\030\t \001(\010\022\014\n\004Jump\030\n \001("
      "\010\022\016\n\006Crouch\030\013 \001(\010\022\014\n\004Fire\030\014 \001(\010\022\021\n\tFire_"
      "hold\030\r \001(\010\022\026\n\016Fire_hold_time\030\016 \001(\002\022\024\n\014Fi"
      "re_release\030\017 \001(\010\022\031\n\021Fire_release_time\030\020 "
      "\001(\002\022\025\n\rWeapon_switch\030\021 \001(\005\022\032\n\022Weapon_swi"
      "tch_time\030\022 \001(\002\022\023\n\013Weapon_slot\030\023 \001(\005\022\027\n\017p"
      "acket_sequence\030\024 \001(\005\"\226\014\n\nServerSnap\022&\n\006p"
      "layer\030\001 \003(\0132\026.ServerSnap.PlayerData\022\027\n\017p"
      "acket_sequence\030\002 \001(\005\032\306\013\n\nPlayerData\022\t\n\001X"
      "\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\022\t\n\001Z\030\003 \001(\002\022\r\n\005ViewX\030\004 "
      "\001(\002\022\r\n\005ViewY\030\005 \001(\002\022\024\n\014Walk_forward\030\006 \001(\010"
      "\022\025\n\rWalk_backward\030\007 \001(\010\022\021\n\tWalk_left\030\010 \001"
      "(\010\022\022\n\nWalk_right\030\t \001(\010\022\014\n\004Jump\030\n \001(\010\022\016\n\006"
      "Crouch\030\013 \001(\010\022\014\n\004Fire\030\014 \001(\010\022\021\n\tFire_hold\030"
      "\r \001(\010\022\026\n\016Fire_hold_time\030\016 \001(\002\022\024\n\014Fire_re"
      "lease\030\017 \001(\010\022\031\n\021Fire_release_time\030\020 \001(\002\022\022"
      "\n\nMax_health\030\021 \001(\002\022\026\n\016Current_health\030\022 \001"
      "(\002\022\025\n\rWeapon_switch\030\023 \001(\005\022\032\n\022Weapon_swit"
      "ch_time\030\024 \001(\002\022\023\n\013Weapon_slot\030\025 \001(\005\0223\n\007we"
      "apons\030\026 \001(\0132\".ServerSnap.PlayerData.Weap"
      "onWheel\022\r\n\005index\030\027 \001(\005\022\022\n\ndeath_type\030\030 \001"
      "(\005\032\320\007\n\013WeaponWheel\022\020\n\010bWarClub\030\001 \001(\010\022\020\n\010"
      "bHas_Bow\030\002 \001(\010\022\027\n\017bow_Normal_Ammo\030\003 \001(\005\022"
      "\032\n\022bow_Explosive_Ammo\030\004 \001(\005\022\027\n\017bow_Poiso"
      "n_Ammo\030\005 \001(\005\022\023\n\013bHas_TekBow\030\006 \001(\010\022\031\n\021Tek"
      "Bow_NormalAmmo\030\007 \001(\005\022\034\n\024TekBow_Explosive"
      "Ammo\030\010 \001(\005\022\031\n\021TekBow_PosionAmmo\030\t \001(\005\022\031\n"
      "\021bHas_SpikeGrenade\030\n \001(\010\022\031\n\021SpikeGrenade"
      "_Ammo\030\013 \001(\005\022\023\n\013bHas_Pistol\030\014 \001(\010\022\023\n\013Pist"
      "ol_Ammo\030\r \001(\005\022\024\n\014bHas_ShotGun\030\016 \001(\010\022\024\n\014S"
      "hotGun_Ammo\030\017 \001(\005\022\026\n\016bHas_Flecheete\030\020 \001("
      "\010\022\026\n\016Fleechete_Ammo\030\021 \001(\005\022\024\n\014MiniGun_Amm"
      "o\030\022 \001(\005\022\033\n\023bHas_RocketLauncher\030\023 \001(\010\022\024\n\014"
      "Rocket_Ammo1\030\024 \001(\005\022\024\n\014Rocket_Ammo2\030\025 \001(\005"
      "\022\024\n\014Rocket_Ammo3\030\026 \001(\005\022\031\n\021bHas_PlasmaCan"
      "non\030\027 \001(\010\022\024\n\014Plasma_Ammo1\030\030 \001(\005\022\024\n\014Plasm"
      "a_Ammo2\030\031 \001(\005\022\024\n\014Plasma_Ammo3\030\032 \001(\005\022\031\n\021b"
      "Has_FlameThrower\030\033 \001(\010\022\031\n\021FlameThrower_A"
      "mmo\030\034 \001(\005\022\027\n\017bHas_SpiderMine\030\035 \001(\010\022\027\n\017Sp"
      "iderMine_Ammo\030\036 \001(\005\022\027\n\017bHas_GravityGun\030\037"
      " \001(\010\022\027\n\017GravityGun_Ammo\030  \001(\005\022\030\n\020Gravity"
      "Gun_Ammo2\030! \001(\005\022\027\n\017bHas_DarkMatter\030\" \001(\010"
      "\022\027\n\017DarkMatter_Ammo\030# \001(\005\022\025\n\rbHas_CrossB"
      "ow\030$ \001(\010\022\034\n\024CrossBow_Normal_Ammo\030% \001(\005\022\037"
      "\n\027CrossBow_Explosive_Ammo\030& \001(\005\022\034\n\024Cross"
      "Bow_Poison_Ammo\030\' \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "t4mp.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_t4mp_2eproto

const ::google::protobuf::EnumDescriptor* Packet_Type_descriptor() {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_enum_descriptors[0];
}
bool Packet_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Packet_Type Packet::invalid;
const Packet_Type Packet::client_connect;
const Packet_Type Packet::server_snap;
const Packet_Type Packet::client_snap;
const Packet_Type Packet::Type_MIN;
const Packet_Type Packet::Type_MAX;
const int Packet::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kTypeFieldNumber;
const int Packet::kPlayerSnapshotFieldNumber;
const int Packet::kServerSnapshotFieldNumber;
const int Packet::kConnectAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t4mp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_snapshot()) {
    player_snapshot_ = new ::PlayerSnap(*from.player_snapshot_);
  } else {
    player_snapshot_ = NULL;
  }
  if (from.has_server_snapshot()) {
    server_snapshot_ = new ::ServerSnap(*from.server_snapshot_);
  } else {
    server_snapshot_ = NULL;
  }
  if (from.has_connect_ack()) {
    connect_ack_ = new ::ConnectAck(*from.connect_ack_);
  } else {
    connect_ack_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Packet)
}

void Packet::SharedCtor() {
  ::memset(&player_snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&player_snapshot_)) + sizeof(type_));
  _cached_size_ = 0;
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != internal_default_instance()) delete player_snapshot_;
  if (this != internal_default_instance()) delete server_snapshot_;
  if (this != internal_default_instance()) delete connect_ack_;
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Packet& Packet::default_instance() {
  protobuf_t4mp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_snapshot_ != NULL) {
    delete player_snapshot_;
  }
  player_snapshot_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_snapshot_ != NULL) {
    delete server_snapshot_;
  }
  server_snapshot_ = NULL;
  if (GetArenaNoVirtual() == NULL && connect_ack_ != NULL) {
    delete connect_ack_;
  }
  connect_ack_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Packet.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Packet_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PlayerSnap player_snapshot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ServerSnap server_snapshot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConnectAck connect_ack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Packet.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .PlayerSnap player_snapshot = 2;
  if (this->has_player_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_snapshot_, output);
  }

  // .ServerSnap server_snapshot = 3;
  if (this->has_server_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->server_snapshot_, output);
  }

  // .ConnectAck connect_ack = 4;
  if (this->has_connect_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->connect_ack_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Packet.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .PlayerSnap player_snapshot = 2;
  if (this->has_player_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player_snapshot_, deterministic, target);
  }

  // .ServerSnap server_snapshot = 3;
  if (this->has_server_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->server_snapshot_, deterministic, target);
  }

  // .ConnectAck connect_ack = 4;
  if (this->has_connect_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->connect_ack_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Packet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .PlayerSnap player_snapshot = 2;
  if (this->has_player_snapshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_snapshot_);
  }

  // .ServerSnap server_snapshot = 3;
  if (this->has_server_snapshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_snapshot_);
  }

  // .ConnectAck connect_ack = 4;
  if (this->has_connect_ack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->connect_ack_);
  }

  // .Packet.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_snapshot()) {
    mutable_player_snapshot()->::PlayerSnap::MergeFrom(from.player_snapshot());
  }
  if (from.has_server_snapshot()) {
    mutable_server_snapshot()->::ServerSnap::MergeFrom(from.server_snapshot());
  }
  if (from.has_connect_ack()) {
    mutable_connect_ack()->::ConnectAck::MergeFrom(from.connect_ack());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  using std::swap;
  swap(player_snapshot_, other->player_snapshot_);
  swap(server_snapshot_, other->server_snapshot_);
  swap(connect_ack_, other->connect_ack_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// .Packet.Type type = 1;
void Packet::clear_type() {
  type_ = 0;
}
::Packet_Type Packet::type() const {
  // @@protoc_insertion_point(field_get:Packet.type)
  return static_cast< ::Packet_Type >(type_);
}
void Packet::set_type(::Packet_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Packet.type)
}

// .PlayerSnap player_snapshot = 2;
bool Packet::has_player_snapshot() const {
  return this != internal_default_instance() && player_snapshot_ != NULL;
}
void Packet::clear_player_snapshot() {
  if (GetArenaNoVirtual() == NULL && player_snapshot_ != NULL) delete player_snapshot_;
  player_snapshot_ = NULL;
}
const ::PlayerSnap& Packet::player_snapshot() const {
  const ::PlayerSnap* p = player_snapshot_;
  // @@protoc_insertion_point(field_get:Packet.player_snapshot)
  return p != NULL ? *p : *reinterpret_cast<const ::PlayerSnap*>(
      &::_PlayerSnap_default_instance_);
}
::PlayerSnap* Packet::mutable_player_snapshot() {
  
  if (player_snapshot_ == NULL) {
    player_snapshot_ = new ::PlayerSnap;
  }
  // @@protoc_insertion_point(field_mutable:Packet.player_snapshot)
  return player_snapshot_;
}
::PlayerSnap* Packet::release_player_snapshot() {
  // @@protoc_insertion_point(field_release:Packet.player_snapshot)
  
  ::PlayerSnap* temp = player_snapshot_;
  player_snapshot_ = NULL;
  return temp;
}
void Packet::set_allocated_player_snapshot(::PlayerSnap* player_snapshot) {
  delete player_snapshot_;
  player_snapshot_ = player_snapshot;
  if (player_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.player_snapshot)
}

// .ServerSnap server_snapshot = 3;
bool Packet::has_server_snapshot() const {
  return this != internal_default_instance() && server_snapshot_ != NULL;
}
void Packet::clear_server_snapshot() {
  if (GetArenaNoVirtual() == NULL && server_snapshot_ != NULL) delete server_snapshot_;
  server_snapshot_ = NULL;
}
const ::ServerSnap& Packet::server_snapshot() const {
  const ::ServerSnap* p = server_snapshot_;
  // @@protoc_insertion_point(field_get:Packet.server_snapshot)
  return p != NULL ? *p : *reinterpret_cast<const ::ServerSnap*>(
      &::_ServerSnap_default_instance_);
}
::ServerSnap* Packet::mutable_server_snapshot() {
  
  if (server_snapshot_ == NULL) {
    server_snapshot_ = new ::ServerSnap;
  }
  // @@protoc_insertion_point(field_mutable:Packet.server_snapshot)
  return server_snapshot_;
}
::ServerSnap* Packet::release_server_snapshot() {
  // @@protoc_insertion_point(field_release:Packet.server_snapshot)
  
  ::ServerSnap* temp = server_snapshot_;
  server_snapshot_ = NULL;
  return temp;
}
void Packet::set_allocated_server_snapshot(::ServerSnap* server_snapshot) {
  delete server_snapshot_;
  server_snapshot_ = server_snapshot;
  if (server_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.server_snapshot)
}

// .ConnectAck connect_ack = 4;
bool Packet::has_connect_ack() const {
  return this != internal_default_instance() && connect_ack_ != NULL;
}
void Packet::clear_connect_ack() {
  if (GetArenaNoVirtual() == NULL && connect_ack_ != NULL) delete connect_ack_;
  connect_ack_ = NULL;
}
const ::ConnectAck& Packet::connect_ack() const {
  const ::ConnectAck* p = connect_ack_;
  // @@protoc_insertion_point(field_get:Packet.connect_ack)
  return p != NULL ? *p : *reinterpret_cast<const ::ConnectAck*>(
      &::_ConnectAck_default_instance_);
}
::ConnectAck* Packet::mutable_connect_ack() {
  
  if (connect_ack_ == NULL) {
    connect_ack_ = new ::ConnectAck;
  }
  // @@protoc_insertion_point(field_mutable:Packet.connect_ack)
  return connect_ack_;
}
::ConnectAck* Packet::release_connect_ack() {
  // @@protoc_insertion_point(field_release:Packet.connect_ack)
  
  ::ConnectAck* temp = connect_ack_;
  connect_ack_ = NULL;
  return temp;
}
void Packet::set_allocated_connect_ack(::ConnectAck* connect_ack) {
  delete connect_ack_;
  connect_ack_ = connect_ack;
  if (connect_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.connect_ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectAck::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectAck::ConnectAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t4mp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnectAck)
}
ConnectAck::ConnectAck(const ConnectAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:ConnectAck)
}

void ConnectAck::SharedCtor() {
  index_ = 0;
  _cached_size_ = 0;
}

ConnectAck::~ConnectAck() {
  // @@protoc_insertion_point(destructor:ConnectAck)
  SharedDtor();
}

void ConnectAck::SharedDtor() {
}

void ConnectAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectAck::descriptor() {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectAck& ConnectAck::default_instance() {
  protobuf_t4mp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConnectAck* ConnectAck::New(::google::protobuf::Arena* arena) const {
  ConnectAck* n = new ConnectAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear();
}

bool ConnectAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnectAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnectAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnectAck)
  return false;
#undef DO_
}

void ConnectAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnectAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnectAck)
}

::google::protobuf::uint8* ConnectAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ConnectAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectAck)
  return target;
}

size_t ConnectAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectAck)
    MergeFrom(*source);
  }
}

void ConnectAck::MergeFrom(const ConnectAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    set_index(from.index());
  }
}

void ConnectAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectAck::CopyFrom(const ConnectAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectAck::IsInitialized() const {
  return true;
}

void ConnectAck::Swap(ConnectAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectAck::InternalSwap(ConnectAck* other) {
  using std::swap;
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectAck::GetMetadata() const {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectAck

// int32 index = 1;
void ConnectAck::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 ConnectAck::index() const {
  // @@protoc_insertion_point(field_get:ConnectAck.index)
  return index_;
}
void ConnectAck::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:ConnectAck.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerSnap::kXFieldNumber;
const int PlayerSnap::kYFieldNumber;
const int PlayerSnap::kZFieldNumber;
const int PlayerSnap::kViewXFieldNumber;
const int PlayerSnap::kViewYFieldNumber;
const int PlayerSnap::kWalkForwardFieldNumber;
const int PlayerSnap::kWalkBackwardFieldNumber;
const int PlayerSnap::kWalkLeftFieldNumber;
const int PlayerSnap::kWalkRightFieldNumber;
const int PlayerSnap::kJumpFieldNumber;
const int PlayerSnap::kCrouchFieldNumber;
const int PlayerSnap::kFireFieldNumber;
const int PlayerSnap::kFireHoldFieldNumber;
const int PlayerSnap::kFireHoldTimeFieldNumber;
const int PlayerSnap::kFireReleaseFieldNumber;
const int PlayerSnap::kFireReleaseTimeFieldNumber;
const int PlayerSnap::kWeaponSwitchFieldNumber;
const int PlayerSnap::kWeaponSwitchTimeFieldNumber;
const int PlayerSnap::kWeaponSlotFieldNumber;
const int PlayerSnap::kPacketSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSnap::PlayerSnap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t4mp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerSnap)
}
PlayerSnap::PlayerSnap(const PlayerSnap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_sequence_) -
    reinterpret_cast<char*>(&x_)) + sizeof(packet_sequence_));
  // @@protoc_insertion_point(copy_constructor:PlayerSnap)
}

void PlayerSnap::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_sequence_) -
      reinterpret_cast<char*>(&x_)) + sizeof(packet_sequence_));
  _cached_size_ = 0;
}

PlayerSnap::~PlayerSnap() {
  // @@protoc_insertion_point(destructor:PlayerSnap)
  SharedDtor();
}

void PlayerSnap::SharedDtor() {
}

void PlayerSnap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSnap::descriptor() {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerSnap& PlayerSnap::default_instance() {
  protobuf_t4mp_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerSnap* PlayerSnap::New(::google::protobuf::Arena* arena) const {
  PlayerSnap* n = new PlayerSnap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerSnap::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerSnap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_sequence_) -
      reinterpret_cast<char*>(&x_)) + sizeof(packet_sequence_));
  _internal_metadata_.Clear();
}

bool PlayerSnap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerSnap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float X = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ViewX = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &viewx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ViewY = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &viewy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Walk_forward = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Walk_backward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Walk_left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Walk_right = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Jump = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Crouch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crouch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Fire = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Fire_hold = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_hold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Fire_hold_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fire_hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Fire_release = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_release_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Fire_release_time = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fire_release_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Weapon_switch = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Weapon_switch_time = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weapon_switch_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Weapon_slot = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 packet_sequence = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerSnap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerSnap)
  return false;
#undef DO_
}

void PlayerSnap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerSnap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float Z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float ViewX = 4;
  if (this->viewx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->viewx(), output);
  }

  // float ViewY = 5;
  if (this->viewy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->viewy(), output);
  }

  // bool Walk_forward = 6;
  if (this->walk_forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->walk_forward(), output);
  }

  // bool Walk_backward = 7;
  if (this->walk_backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->walk_backward(), output);
  }

  // bool Walk_left = 8;
  if (this->walk_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->walk_left(), output);
  }

  // bool Walk_right = 9;
  if (this->walk_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->walk_right(), output);
  }

  // bool Jump = 10;
  if (this->jump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->jump(), output);
  }

  // bool Crouch = 11;
  if (this->crouch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->crouch(), output);
  }

  // bool Fire = 12;
  if (this->fire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->fire(), output);
  }

  // bool Fire_hold = 13;
  if (this->fire_hold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->fire_hold(), output);
  }

  // float Fire_hold_time = 14;
  if (this->fire_hold_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->fire_hold_time(), output);
  }

  // bool Fire_release = 15;
  if (this->fire_release() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fire_release(), output);
  }

  // float Fire_release_time = 16;
  if (this->fire_release_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->fire_release_time(), output);
  }

  // int32 Weapon_switch = 17;
  if (this->weapon_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->weapon_switch(), output);
  }

  // float Weapon_switch_time = 18;
  if (this->weapon_switch_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->weapon_switch_time(), output);
  }

  // int32 Weapon_slot = 19;
  if (this->weapon_slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->weapon_slot(), output);
  }

  // int32 packet_sequence = 20;
  if (this->packet_sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->packet_sequence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerSnap)
}

::google::protobuf::uint8* PlayerSnap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerSnap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float Z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float ViewX = 4;
  if (this->viewx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->viewx(), target);
  }

  // float ViewY = 5;
  if (this->viewy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->viewy(), target);
  }

  // bool Walk_forward = 6;
  if (this->walk_forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->walk_forward(), target);
  }

  // bool Walk_backward = 7;
  if (this->walk_backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->walk_backward(), target);
  }

  // bool Walk_left = 8;
  if (this->walk_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->walk_left(), target);
  }

  // bool Walk_right = 9;
  if (this->walk_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->walk_right(), target);
  }

  // bool Jump = 10;
  if (this->jump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->jump(), target);
  }

  // bool Crouch = 11;
  if (this->crouch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->crouch(), target);
  }

  // bool Fire = 12;
  if (this->fire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->fire(), target);
  }

  // bool Fire_hold = 13;
  if (this->fire_hold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->fire_hold(), target);
  }

  // float Fire_hold_time = 14;
  if (this->fire_hold_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->fire_hold_time(), target);
  }

  // bool Fire_release = 15;
  if (this->fire_release() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fire_release(), target);
  }

  // float Fire_release_time = 16;
  if (this->fire_release_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->fire_release_time(), target);
  }

  // int32 Weapon_switch = 17;
  if (this->weapon_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->weapon_switch(), target);
  }

  // float Weapon_switch_time = 18;
  if (this->weapon_switch_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->weapon_switch_time(), target);
  }

  // int32 Weapon_slot = 19;
  if (this->weapon_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->weapon_slot(), target);
  }

  // int32 packet_sequence = 20;
  if (this->packet_sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->packet_sequence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerSnap)
  return target;
}

size_t PlayerSnap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerSnap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float X = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float Z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float ViewX = 4;
  if (this->viewx() != 0) {
    total_size += 1 + 4;
  }

  // float ViewY = 5;
  if (this->viewy() != 0) {
    total_size += 1 + 4;
  }

  // bool Walk_forward = 6;
  if (this->walk_forward() != 0) {
    total_size += 1 + 1;
  }

  // bool Walk_backward = 7;
  if (this->walk_backward() != 0) {
    total_size += 1 + 1;
  }

  // bool Walk_left = 8;
  if (this->walk_left() != 0) {
    total_size += 1 + 1;
  }

  // bool Walk_right = 9;
  if (this->walk_right() != 0) {
    total_size += 1 + 1;
  }

  // bool Jump = 10;
  if (this->jump() != 0) {
    total_size += 1 + 1;
  }

  // bool Crouch = 11;
  if (this->crouch() != 0) {
    total_size += 1 + 1;
  }

  // bool Fire = 12;
  if (this->fire() != 0) {
    total_size += 1 + 1;
  }

  // bool Fire_hold = 13;
  if (this->fire_hold() != 0) {
    total_size += 1 + 1;
  }

  // float Fire_hold_time = 14;
  if (this->fire_hold_time() != 0) {
    total_size += 1 + 4;
  }

  // bool Fire_release = 15;
  if (this->fire_release() != 0) {
    total_size += 1 + 1;
  }

  // float Fire_release_time = 16;
  if (this->fire_release_time() != 0) {
    total_size += 2 + 4;
  }

  // int32 Weapon_switch = 17;
  if (this->weapon_switch() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weapon_switch());
  }

  // float Weapon_switch_time = 18;
  if (this->weapon_switch_time() != 0) {
    total_size += 2 + 4;
  }

  // int32 Weapon_slot = 19;
  if (this->weapon_slot() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weapon_slot());
  }

  // int32 packet_sequence = 20;
  if (this->packet_sequence() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packet_sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSnap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerSnap)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSnap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerSnap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerSnap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerSnap)
    MergeFrom(*source);
  }
}

void PlayerSnap::MergeFrom(const PlayerSnap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerSnap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.viewx() != 0) {
    set_viewx(from.viewx());
  }
  if (from.viewy() != 0) {
    set_viewy(from.viewy());
  }
  if (from.walk_forward() != 0) {
    set_walk_forward(from.walk_forward());
  }
  if (from.walk_backward() != 0) {
    set_walk_backward(from.walk_backward());
  }
  if (from.walk_left() != 0) {
    set_walk_left(from.walk_left());
  }
  if (from.walk_right() != 0) {
    set_walk_right(from.walk_right());
  }
  if (from.jump() != 0) {
    set_jump(from.jump());
  }
  if (from.crouch() != 0) {
    set_crouch(from.crouch());
  }
  if (from.fire() != 0) {
    set_fire(from.fire());
  }
  if (from.fire_hold() != 0) {
    set_fire_hold(from.fire_hold());
  }
  if (from.fire_hold_time() != 0) {
    set_fire_hold_time(from.fire_hold_time());
  }
  if (from.fire_release() != 0) {
    set_fire_release(from.fire_release());
  }
  if (from.fire_release_time() != 0) {
    set_fire_release_time(from.fire_release_time());
  }
  if (from.weapon_switch() != 0) {
    set_weapon_switch(from.weapon_switch());
  }
  if (from.weapon_switch_time() != 0) {
    set_weapon_switch_time(from.weapon_switch_time());
  }
  if (from.weapon_slot() != 0) {
    set_weapon_slot(from.weapon_slot());
  }
  if (from.packet_sequence() != 0) {
    set_packet_sequence(from.packet_sequence());
  }
}

void PlayerSnap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerSnap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSnap::CopyFrom(const PlayerSnap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerSnap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSnap::IsInitialized() const {
  return true;
}

void PlayerSnap::Swap(PlayerSnap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSnap::InternalSwap(PlayerSnap* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(viewx_, other->viewx_);
  swap(viewy_, other->viewy_);
  swap(walk_forward_, other->walk_forward_);
  swap(walk_backward_, other->walk_backward_);
  swap(walk_left_, other->walk_left_);
  swap(walk_right_, other->walk_right_);
  swap(jump_, other->jump_);
  swap(crouch_, other->crouch_);
  swap(fire_, other->fire_);
  swap(fire_hold_, other->fire_hold_);
  swap(fire_hold_time_, other->fire_hold_time_);
  swap(fire_release_, other->fire_release_);
  swap(fire_release_time_, other->fire_release_time_);
  swap(weapon_switch_, other->weapon_switch_);
  swap(weapon_switch_time_, other->weapon_switch_time_);
  swap(weapon_slot_, other->weapon_slot_);
  swap(packet_sequence_, other->packet_sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerSnap::GetMetadata() const {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerSnap

// float X = 1;
void PlayerSnap::clear_x() {
  x_ = 0;
}
float PlayerSnap::x() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.X)
  return x_;
}
void PlayerSnap::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.X)
}

// float Y = 2;
void PlayerSnap::clear_y() {
  y_ = 0;
}
float PlayerSnap::y() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Y)
  return y_;
}
void PlayerSnap::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Y)
}

// float Z = 3;
void PlayerSnap::clear_z() {
  z_ = 0;
}
float PlayerSnap::z() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Z)
  return z_;
}
void PlayerSnap::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Z)
}

// float ViewX = 4;
void PlayerSnap::clear_viewx() {
  viewx_ = 0;
}
float PlayerSnap::viewx() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.ViewX)
  return viewx_;
}
void PlayerSnap::set_viewx(float value) {
  
  viewx_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.ViewX)
}

// float ViewY = 5;
void PlayerSnap::clear_viewy() {
  viewy_ = 0;
}
float PlayerSnap::viewy() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.ViewY)
  return viewy_;
}
void PlayerSnap::set_viewy(float value) {
  
  viewy_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.ViewY)
}

// bool Walk_forward = 6;
void PlayerSnap::clear_walk_forward() {
  walk_forward_ = false;
}
bool PlayerSnap::walk_forward() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Walk_forward)
  return walk_forward_;
}
void PlayerSnap::set_walk_forward(bool value) {
  
  walk_forward_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Walk_forward)
}

// bool Walk_backward = 7;
void PlayerSnap::clear_walk_backward() {
  walk_backward_ = false;
}
bool PlayerSnap::walk_backward() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Walk_backward)
  return walk_backward_;
}
void PlayerSnap::set_walk_backward(bool value) {
  
  walk_backward_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Walk_backward)
}

// bool Walk_left = 8;
void PlayerSnap::clear_walk_left() {
  walk_left_ = false;
}
bool PlayerSnap::walk_left() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Walk_left)
  return walk_left_;
}
void PlayerSnap::set_walk_left(bool value) {
  
  walk_left_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Walk_left)
}

// bool Walk_right = 9;
void PlayerSnap::clear_walk_right() {
  walk_right_ = false;
}
bool PlayerSnap::walk_right() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Walk_right)
  return walk_right_;
}
void PlayerSnap::set_walk_right(bool value) {
  
  walk_right_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Walk_right)
}

// bool Jump = 10;
void PlayerSnap::clear_jump() {
  jump_ = false;
}
bool PlayerSnap::jump() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Jump)
  return jump_;
}
void PlayerSnap::set_jump(bool value) {
  
  jump_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Jump)
}

// bool Crouch = 11;
void PlayerSnap::clear_crouch() {
  crouch_ = false;
}
bool PlayerSnap::crouch() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Crouch)
  return crouch_;
}
void PlayerSnap::set_crouch(bool value) {
  
  crouch_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Crouch)
}

// bool Fire = 12;
void PlayerSnap::clear_fire() {
  fire_ = false;
}
bool PlayerSnap::fire() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire)
  return fire_;
}
void PlayerSnap::set_fire(bool value) {
  
  fire_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire)
}

// bool Fire_hold = 13;
void PlayerSnap::clear_fire_hold() {
  fire_hold_ = false;
}
bool PlayerSnap::fire_hold() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire_hold)
  return fire_hold_;
}
void PlayerSnap::set_fire_hold(bool value) {
  
  fire_hold_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire_hold)
}

// float Fire_hold_time = 14;
void PlayerSnap::clear_fire_hold_time() {
  fire_hold_time_ = 0;
}
float PlayerSnap::fire_hold_time() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire_hold_time)
  return fire_hold_time_;
}
void PlayerSnap::set_fire_hold_time(float value) {
  
  fire_hold_time_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire_hold_time)
}

// bool Fire_release = 15;
void PlayerSnap::clear_fire_release() {
  fire_release_ = false;
}
bool PlayerSnap::fire_release() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire_release)
  return fire_release_;
}
void PlayerSnap::set_fire_release(bool value) {
  
  fire_release_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire_release)
}

// float Fire_release_time = 16;
void PlayerSnap::clear_fire_release_time() {
  fire_release_time_ = 0;
}
float PlayerSnap::fire_release_time() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire_release_time)
  return fire_release_time_;
}
void PlayerSnap::set_fire_release_time(float value) {
  
  fire_release_time_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire_release_time)
}

// int32 Weapon_switch = 17;
void PlayerSnap::clear_weapon_switch() {
  weapon_switch_ = 0;
}
::google::protobuf::int32 PlayerSnap::weapon_switch() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Weapon_switch)
  return weapon_switch_;
}
void PlayerSnap::set_weapon_switch(::google::protobuf::int32 value) {
  
  weapon_switch_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Weapon_switch)
}

// float Weapon_switch_time = 18;
void PlayerSnap::clear_weapon_switch_time() {
  weapon_switch_time_ = 0;
}
float PlayerSnap::weapon_switch_time() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Weapon_switch_time)
  return weapon_switch_time_;
}
void PlayerSnap::set_weapon_switch_time(float value) {
  
  weapon_switch_time_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Weapon_switch_time)
}

// int32 Weapon_slot = 19;
void PlayerSnap::clear_weapon_slot() {
  weapon_slot_ = 0;
}
::google::protobuf::int32 PlayerSnap::weapon_slot() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Weapon_slot)
  return weapon_slot_;
}
void PlayerSnap::set_weapon_slot(::google::protobuf::int32 value) {
  
  weapon_slot_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.Weapon_slot)
}

// int32 packet_sequence = 20;
void PlayerSnap::clear_packet_sequence() {
  packet_sequence_ = 0;
}
::google::protobuf::int32 PlayerSnap::packet_sequence() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.packet_sequence)
  return packet_sequence_;
}
void PlayerSnap::set_packet_sequence(::google::protobuf::int32 value) {
  
  packet_sequence_ = value;
  // @@protoc_insertion_point(field_set:PlayerSnap.packet_sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerSnap_PlayerData_WeaponWheel::kBWarClubFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasBowFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBowNormalAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBowExplosiveAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBowPoisonAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasTekBowFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kTekBowNormalAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kTekBowExplosiveAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kTekBowPosionAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasSpikeGrenadeFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kSpikeGrenadeAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasPistolFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kPistolAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasShotGunFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kShotGunAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasFlecheeteFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kFleecheteAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kMiniGunAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasRocketLauncherFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kRocketAmmo1FieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kRocketAmmo2FieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kRocketAmmo3FieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasPlasmaCannonFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kPlasmaAmmo1FieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kPlasmaAmmo2FieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kPlasmaAmmo3FieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasFlameThrowerFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kFlameThrowerAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasSpiderMineFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kSpiderMineAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasGravityGunFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kGravityGunAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kGravityGunAmmo2FieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasDarkMatterFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kDarkMatterAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kBHasCrossBowFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kCrossBowNormalAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kCrossBowExplosiveAmmoFieldNumber;
const int ServerSnap_PlayerData_WeaponWheel::kCrossBowPoisonAmmoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerSnap_PlayerData_WeaponWheel::ServerSnap_PlayerData_WeaponWheel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t4mp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerSnap.PlayerData.WeaponWheel)
}
ServerSnap_PlayerData_WeaponWheel::ServerSnap_PlayerData_WeaponWheel(const ServerSnap_PlayerData_WeaponWheel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bow_normal_ammo_, &from.bow_normal_ammo_,
    static_cast<size_t>(reinterpret_cast<char*>(&crossbow_poison_ammo_) -
    reinterpret_cast<char*>(&bow_normal_ammo_)) + sizeof(crossbow_poison_ammo_));
  // @@protoc_insertion_point(copy_constructor:ServerSnap.PlayerData.WeaponWheel)
}

void ServerSnap_PlayerData_WeaponWheel::SharedCtor() {
  ::memset(&bow_normal_ammo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crossbow_poison_ammo_) -
      reinterpret_cast<char*>(&bow_normal_ammo_)) + sizeof(crossbow_poison_ammo_));
  _cached_size_ = 0;
}

ServerSnap_PlayerData_WeaponWheel::~ServerSnap_PlayerData_WeaponWheel() {
  // @@protoc_insertion_point(destructor:ServerSnap.PlayerData.WeaponWheel)
  SharedDtor();
}

void ServerSnap_PlayerData_WeaponWheel::SharedDtor() {
}

void ServerSnap_PlayerData_WeaponWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerSnap_PlayerData_WeaponWheel::descriptor() {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerSnap_PlayerData_WeaponWheel& ServerSnap_PlayerData_WeaponWheel::default_instance() {
  protobuf_t4mp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerSnap_PlayerData_WeaponWheel* ServerSnap_PlayerData_WeaponWheel::New(::google::protobuf::Arena* arena) const {
  ServerSnap_PlayerData_WeaponWheel* n = new ServerSnap_PlayerData_WeaponWheel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerSnap_PlayerData_WeaponWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerSnap.PlayerData.WeaponWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bow_normal_ammo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crossbow_poison_ammo_) -
      reinterpret_cast<char*>(&bow_normal_ammo_)) + sizeof(crossbow_poison_ammo_));
  _internal_metadata_.Clear();
}

bool ServerSnap_PlayerData_WeaponWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerSnap.PlayerData.WeaponWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bWarClub = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bwarclub_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_Bow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_bow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bow_Normal_Ammo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bow_normal_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bow_Explosive_Ammo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bow_explosive_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bow_Poison_Ammo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bow_poison_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_TekBow = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_tekbow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TekBow_NormalAmmo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tekbow_normalammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TekBow_ExplosiveAmmo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tekbow_explosiveammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TekBow_PosionAmmo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tekbow_posionammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_SpikeGrenade = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_spikegrenade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SpikeGrenade_Ammo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spikegrenade_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_Pistol = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_pistol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Pistol_Ammo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pistol_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_ShotGun = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_shotgun_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ShotGun_Ammo = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shotgun_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_Flecheete = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_flecheete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Fleechete_Ammo = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fleechete_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MiniGun_Ammo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minigun_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_RocketLauncher = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_rocketlauncher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Rocket_Ammo1 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rocket_ammo1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Rocket_Ammo2 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rocket_ammo2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Rocket_Ammo3 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rocket_ammo3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_PlasmaCannon = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_plasmacannon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Plasma_Ammo1 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plasma_ammo1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Plasma_Ammo2 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plasma_ammo2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Plasma_Ammo3 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plasma_ammo3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_FlameThrower = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_flamethrower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FlameThrower_Ammo = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flamethrower_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_SpiderMine = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_spidermine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SpiderMine_Ammo = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spidermine_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_GravityGun = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_gravitygun_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 GravityGun_Ammo = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gravitygun_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 GravityGun_Ammo2 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gravitygun_ammo2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_DarkMatter = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_darkmatter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DarkMatter_Ammo = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &darkmatter_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHas_CrossBow = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhas_crossbow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CrossBow_Normal_Ammo = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crossbow_normal_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CrossBow_Explosive_Ammo = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crossbow_explosive_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CrossBow_Poison_Ammo = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crossbow_poison_ammo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerSnap.PlayerData.WeaponWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerSnap.PlayerData.WeaponWheel)
  return false;
#undef DO_
}

void ServerSnap_PlayerData_WeaponWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerSnap.PlayerData.WeaponWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bWarClub = 1;
  if (this->bwarclub() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bwarclub(), output);
  }

  // bool bHas_Bow = 2;
  if (this->bhas_bow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bhas_bow(), output);
  }

  // int32 bow_Normal_Ammo = 3;
  if (this->bow_normal_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bow_normal_ammo(), output);
  }

  // int32 bow_Explosive_Ammo = 4;
  if (this->bow_explosive_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bow_explosive_ammo(), output);
  }

  // int32 bow_Poison_Ammo = 5;
  if (this->bow_poison_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bow_poison_ammo(), output);
  }

  // bool bHas_TekBow = 6;
  if (this->bhas_tekbow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bhas_tekbow(), output);
  }

  // int32 TekBow_NormalAmmo = 7;
  if (this->tekbow_normalammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tekbow_normalammo(), output);
  }

  // int32 TekBow_ExplosiveAmmo = 8;
  if (this->tekbow_explosiveammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tekbow_explosiveammo(), output);
  }

  // int32 TekBow_PosionAmmo = 9;
  if (this->tekbow_posionammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tekbow_posionammo(), output);
  }

  // bool bHas_SpikeGrenade = 10;
  if (this->bhas_spikegrenade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bhas_spikegrenade(), output);
  }

  // int32 SpikeGrenade_Ammo = 11;
  if (this->spikegrenade_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->spikegrenade_ammo(), output);
  }

  // bool bHas_Pistol = 12;
  if (this->bhas_pistol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->bhas_pistol(), output);
  }

  // int32 Pistol_Ammo = 13;
  if (this->pistol_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pistol_ammo(), output);
  }

  // bool bHas_ShotGun = 14;
  if (this->bhas_shotgun() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->bhas_shotgun(), output);
  }

  // int32 ShotGun_Ammo = 15;
  if (this->shotgun_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->shotgun_ammo(), output);
  }

  // bool bHas_Flecheete = 16;
  if (this->bhas_flecheete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->bhas_flecheete(), output);
  }

  // int32 Fleechete_Ammo = 17;
  if (this->fleechete_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->fleechete_ammo(), output);
  }

  // int32 MiniGun_Ammo = 18;
  if (this->minigun_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->minigun_ammo(), output);
  }

  // bool bHas_RocketLauncher = 19;
  if (this->bhas_rocketlauncher() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->bhas_rocketlauncher(), output);
  }

  // int32 Rocket_Ammo1 = 20;
  if (this->rocket_ammo1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->rocket_ammo1(), output);
  }

  // int32 Rocket_Ammo2 = 21;
  if (this->rocket_ammo2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->rocket_ammo2(), output);
  }

  // int32 Rocket_Ammo3 = 22;
  if (this->rocket_ammo3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->rocket_ammo3(), output);
  }

  // bool bHas_PlasmaCannon = 23;
  if (this->bhas_plasmacannon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->bhas_plasmacannon(), output);
  }

  // int32 Plasma_Ammo1 = 24;
  if (this->plasma_ammo1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->plasma_ammo1(), output);
  }

  // int32 Plasma_Ammo2 = 25;
  if (this->plasma_ammo2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->plasma_ammo2(), output);
  }

  // int32 Plasma_Ammo3 = 26;
  if (this->plasma_ammo3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->plasma_ammo3(), output);
  }

  // bool bHas_FlameThrower = 27;
  if (this->bhas_flamethrower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->bhas_flamethrower(), output);
  }

  // int32 FlameThrower_Ammo = 28;
  if (this->flamethrower_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->flamethrower_ammo(), output);
  }

  // bool bHas_SpiderMine = 29;
  if (this->bhas_spidermine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->bhas_spidermine(), output);
  }

  // int32 SpiderMine_Ammo = 30;
  if (this->spidermine_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->spidermine_ammo(), output);
  }

  // bool bHas_GravityGun = 31;
  if (this->bhas_gravitygun() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->bhas_gravitygun(), output);
  }

  // int32 GravityGun_Ammo = 32;
  if (this->gravitygun_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->gravitygun_ammo(), output);
  }

  // int32 GravityGun_Ammo2 = 33;
  if (this->gravitygun_ammo2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->gravitygun_ammo2(), output);
  }

  // bool bHas_DarkMatter = 34;
  if (this->bhas_darkmatter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->bhas_darkmatter(), output);
  }

  // int32 DarkMatter_Ammo = 35;
  if (this->darkmatter_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->darkmatter_ammo(), output);
  }

  // bool bHas_CrossBow = 36;
  if (this->bhas_crossbow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->bhas_crossbow(), output);
  }

  // int32 CrossBow_Normal_Ammo = 37;
  if (this->crossbow_normal_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->crossbow_normal_ammo(), output);
  }

  // int32 CrossBow_Explosive_Ammo = 38;
  if (this->crossbow_explosive_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->crossbow_explosive_ammo(), output);
  }

  // int32 CrossBow_Poison_Ammo = 39;
  if (this->crossbow_poison_ammo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->crossbow_poison_ammo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerSnap.PlayerData.WeaponWheel)
}

::google::protobuf::uint8* ServerSnap_PlayerData_WeaponWheel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerSnap.PlayerData.WeaponWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bWarClub = 1;
  if (this->bwarclub() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bwarclub(), target);
  }

  // bool bHas_Bow = 2;
  if (this->bhas_bow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bhas_bow(), target);
  }

  // int32 bow_Normal_Ammo = 3;
  if (this->bow_normal_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bow_normal_ammo(), target);
  }

  // int32 bow_Explosive_Ammo = 4;
  if (this->bow_explosive_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bow_explosive_ammo(), target);
  }

  // int32 bow_Poison_Ammo = 5;
  if (this->bow_poison_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bow_poison_ammo(), target);
  }

  // bool bHas_TekBow = 6;
  if (this->bhas_tekbow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bhas_tekbow(), target);
  }

  // int32 TekBow_NormalAmmo = 7;
  if (this->tekbow_normalammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tekbow_normalammo(), target);
  }

  // int32 TekBow_ExplosiveAmmo = 8;
  if (this->tekbow_explosiveammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tekbow_explosiveammo(), target);
  }

  // int32 TekBow_PosionAmmo = 9;
  if (this->tekbow_posionammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tekbow_posionammo(), target);
  }

  // bool bHas_SpikeGrenade = 10;
  if (this->bhas_spikegrenade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bhas_spikegrenade(), target);
  }

  // int32 SpikeGrenade_Ammo = 11;
  if (this->spikegrenade_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->spikegrenade_ammo(), target);
  }

  // bool bHas_Pistol = 12;
  if (this->bhas_pistol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->bhas_pistol(), target);
  }

  // int32 Pistol_Ammo = 13;
  if (this->pistol_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pistol_ammo(), target);
  }

  // bool bHas_ShotGun = 14;
  if (this->bhas_shotgun() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->bhas_shotgun(), target);
  }

  // int32 ShotGun_Ammo = 15;
  if (this->shotgun_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->shotgun_ammo(), target);
  }

  // bool bHas_Flecheete = 16;
  if (this->bhas_flecheete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->bhas_flecheete(), target);
  }

  // int32 Fleechete_Ammo = 17;
  if (this->fleechete_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->fleechete_ammo(), target);
  }

  // int32 MiniGun_Ammo = 18;
  if (this->minigun_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->minigun_ammo(), target);
  }

  // bool bHas_RocketLauncher = 19;
  if (this->bhas_rocketlauncher() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->bhas_rocketlauncher(), target);
  }

  // int32 Rocket_Ammo1 = 20;
  if (this->rocket_ammo1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->rocket_ammo1(), target);
  }

  // int32 Rocket_Ammo2 = 21;
  if (this->rocket_ammo2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->rocket_ammo2(), target);
  }

  // int32 Rocket_Ammo3 = 22;
  if (this->rocket_ammo3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->rocket_ammo3(), target);
  }

  // bool bHas_PlasmaCannon = 23;
  if (this->bhas_plasmacannon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->bhas_plasmacannon(), target);
  }

  // int32 Plasma_Ammo1 = 24;
  if (this->plasma_ammo1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->plasma_ammo1(), target);
  }

  // int32 Plasma_Ammo2 = 25;
  if (this->plasma_ammo2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->plasma_ammo2(), target);
  }

  // int32 Plasma_Ammo3 = 26;
  if (this->plasma_ammo3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->plasma_ammo3(), target);
  }

  // bool bHas_FlameThrower = 27;
  if (this->bhas_flamethrower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->bhas_flamethrower(), target);
  }

  // int32 FlameThrower_Ammo = 28;
  if (this->flamethrower_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->flamethrower_ammo(), target);
  }

  // bool bHas_SpiderMine = 29;
  if (this->bhas_spidermine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->bhas_spidermine(), target);
  }

  // int32 SpiderMine_Ammo = 30;
  if (this->spidermine_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->spidermine_ammo(), target);
  }

  // bool bHas_GravityGun = 31;
  if (this->bhas_gravitygun() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->bhas_gravitygun(), target);
  }

  // int32 GravityGun_Ammo = 32;
  if (this->gravitygun_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->gravitygun_ammo(), target);
  }

  // int32 GravityGun_Ammo2 = 33;
  if (this->gravitygun_ammo2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->gravitygun_ammo2(), target);
  }

  // bool bHas_DarkMatter = 34;
  if (this->bhas_darkmatter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->bhas_darkmatter(), target);
  }

  // int32 DarkMatter_Ammo = 35;
  if (this->darkmatter_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->darkmatter_ammo(), target);
  }

  // bool bHas_CrossBow = 36;
  if (this->bhas_crossbow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->bhas_crossbow(), target);
  }

  // int32 CrossBow_Normal_Ammo = 37;
  if (this->crossbow_normal_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->crossbow_normal_ammo(), target);
  }

  // int32 CrossBow_Explosive_Ammo = 38;
  if (this->crossbow_explosive_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->crossbow_explosive_ammo(), target);
  }

  // int32 CrossBow_Poison_Ammo = 39;
  if (this->crossbow_poison_ammo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->crossbow_poison_ammo(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerSnap.PlayerData.WeaponWheel)
  return target;
}

size_t ServerSnap_PlayerData_WeaponWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerSnap.PlayerData.WeaponWheel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 bow_Normal_Ammo = 3;
  if (this->bow_normal_ammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bow_normal_ammo());
  }

  // int32 bow_Explosive_Ammo = 4;
  if (this->bow_explosive_ammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bow_explosive_ammo());
  }

  // bool bWarClub = 1;
  if (this->bwarclub() != 0) {
    total_size += 1 + 1;
  }

  // bool bHas_Bow = 2;
  if (this->bhas_bow() != 0) {
    total_size += 1 + 1;
  }

  // bool bHas_TekBow = 6;
  if (this->bhas_tekbow() != 0) {
    total_size += 1 + 1;
  }

  // bool bHas_SpikeGrenade = 10;
  if (this->bhas_spikegrenade() != 0) {
    total_size += 1 + 1;
  }

  // int32 bow_Poison_Ammo = 5;
  if (this->bow_poison_ammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bow_poison_ammo());
  }

  // int32 TekBow_NormalAmmo = 7;
  if (this->tekbow_normalammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tekbow_normalammo());
  }

  // int32 TekBow_ExplosiveAmmo = 8;
  if (this->tekbow_explosiveammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tekbow_explosiveammo());
  }

  // int32 TekBow_PosionAmmo = 9;
  if (this->tekbow_posionammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tekbow_posionammo());
  }

  // int32 SpikeGrenade_Ammo = 11;
  if (this->spikegrenade_ammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spikegrenade_ammo());
  }

  // int32 Pistol_Ammo = 13;
  if (this->pistol_ammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pistol_ammo());
  }

  // int32 ShotGun_Ammo = 15;
  if (this->shotgun_ammo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shotgun_ammo());
  }

  // bool bHas_Pistol = 12;
  if (this->bhas_pistol() != 0) {
    total_size += 1 + 1;
  }

  // bool bHas_ShotGun = 14;
  if (this->bhas_shotgun() != 0) {
    total_size += 1 + 1;
  }

  // bool bHas_Flecheete = 16;
  if (this->bhas_flecheete() != 0) {
    total_size += 2 + 1;
  }

  // bool bHas_RocketLauncher = 19;
  if (this->bhas_rocketlauncher() != 0) {
    total_size += 2 + 1;
  }

  // int32 Fleechete_Ammo = 17;
  if (this->fleechete_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fleechete_ammo());
  }

  // int32 MiniGun_Ammo = 18;
  if (this->minigun_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minigun_ammo());
  }

  // int32 Rocket_Ammo1 = 20;
  if (this->rocket_ammo1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rocket_ammo1());
  }

  // int32 Rocket_Ammo2 = 21;
  if (this->rocket_ammo2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rocket_ammo2());
  }

  // int32 Rocket_Ammo3 = 22;
  if (this->rocket_ammo3() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rocket_ammo3());
  }

  // int32 Plasma_Ammo1 = 24;
  if (this->plasma_ammo1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plasma_ammo1());
  }

  // int32 Plasma_Ammo2 = 25;
  if (this->plasma_ammo2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plasma_ammo2());
  }

  // int32 Plasma_Ammo3 = 26;
  if (this->plasma_ammo3() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plasma_ammo3());
  }

  // bool bHas_PlasmaCannon = 23;
  if (this->bhas_plasmacannon() != 0) {
    total_size += 2 + 1;
  }

  // bool bHas_FlameThrower = 27;
  if (this->bhas_flamethrower() != 0) {
    total_size += 2 + 1;
  }

  // bool bHas_SpiderMine = 29;
  if (this->bhas_spidermine() != 0) {
    total_size += 2 + 1;
  }

  // bool bHas_GravityGun = 31;
  if (this->bhas_gravitygun() != 0) {
    total_size += 2 + 1;
  }

  // int32 FlameThrower_Ammo = 28;
  if (this->flamethrower_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flamethrower_ammo());
  }

  // int32 SpiderMine_Ammo = 30;
  if (this->spidermine_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spidermine_ammo());
  }

  // int32 GravityGun_Ammo = 32;
  if (this->gravitygun_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gravitygun_ammo());
  }

  // int32 GravityGun_Ammo2 = 33;
  if (this->gravitygun_ammo2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gravitygun_ammo2());
  }

  // int32 DarkMatter_Ammo = 35;
  if (this->darkmatter_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->darkmatter_ammo());
  }

  // bool bHas_DarkMatter = 34;
  if (this->bhas_darkmatter() != 0) {
    total_size += 2 + 1;
  }

  // bool bHas_CrossBow = 36;
  if (this->bhas_crossbow() != 0) {
    total_size += 2 + 1;
  }

  // int32 CrossBow_Normal_Ammo = 37;
  if (this->crossbow_normal_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->crossbow_normal_ammo());
  }

  // int32 CrossBow_Explosive_Ammo = 38;
  if (this->crossbow_explosive_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->crossbow_explosive_ammo());
  }

  // int32 CrossBow_Poison_Ammo = 39;
  if (this->crossbow_poison_ammo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->crossbow_poison_ammo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerSnap_PlayerData_WeaponWheel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerSnap.PlayerData.WeaponWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerSnap_PlayerData_WeaponWheel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerSnap_PlayerData_WeaponWheel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerSnap.PlayerData.WeaponWheel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerSnap.PlayerData.WeaponWheel)
    MergeFrom(*source);
  }
}

void ServerSnap_PlayerData_WeaponWheel::MergeFrom(const ServerSnap_PlayerData_WeaponWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerSnap.PlayerData.WeaponWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bow_normal_ammo() != 0) {
    set_bow_normal_ammo(from.bow_normal_ammo());
  }
  if (from.bow_explosive_ammo() != 0) {
    set_bow_explosive_ammo(from.bow_explosive_ammo());
  }
  if (from.bwarclub() != 0) {
    set_bwarclub(from.bwarclub());
  }
  if (from.bhas_bow() != 0) {
    set_bhas_bow(from.bhas_bow());
  }
  if (from.bhas_tekbow() != 0) {
    set_bhas_tekbow(from.bhas_tekbow());
  }
  if (from.bhas_spikegrenade() != 0) {
    set_bhas_spikegrenade(from.bhas_spikegrenade());
  }
  if (from.bow_poison_ammo() != 0) {
    set_bow_poison_ammo(from.bow_poison_ammo());
  }
  if (from.tekbow_normalammo() != 0) {
    set_tekbow_normalammo(from.tekbow_normalammo());
  }
  if (from.tekbow_explosiveammo() != 0) {
    set_tekbow_explosiveammo(from.tekbow_explosiveammo());
  }
  if (from.tekbow_posionammo() != 0) {
    set_tekbow_posionammo(from.tekbow_posionammo());
  }
  if (from.spikegrenade_ammo() != 0) {
    set_spikegrenade_ammo(from.spikegrenade_ammo());
  }
  if (from.pistol_ammo() != 0) {
    set_pistol_ammo(from.pistol_ammo());
  }
  if (from.shotgun_ammo() != 0) {
    set_shotgun_ammo(from.shotgun_ammo());
  }
  if (from.bhas_pistol() != 0) {
    set_bhas_pistol(from.bhas_pistol());
  }
  if (from.bhas_shotgun() != 0) {
    set_bhas_shotgun(from.bhas_shotgun());
  }
  if (from.bhas_flecheete() != 0) {
    set_bhas_flecheete(from.bhas_flecheete());
  }
  if (from.bhas_rocketlauncher() != 0) {
    set_bhas_rocketlauncher(from.bhas_rocketlauncher());
  }
  if (from.fleechete_ammo() != 0) {
    set_fleechete_ammo(from.fleechete_ammo());
  }
  if (from.minigun_ammo() != 0) {
    set_minigun_ammo(from.minigun_ammo());
  }
  if (from.rocket_ammo1() != 0) {
    set_rocket_ammo1(from.rocket_ammo1());
  }
  if (from.rocket_ammo2() != 0) {
    set_rocket_ammo2(from.rocket_ammo2());
  }
  if (from.rocket_ammo3() != 0) {
    set_rocket_ammo3(from.rocket_ammo3());
  }
  if (from.plasma_ammo1() != 0) {
    set_plasma_ammo1(from.plasma_ammo1());
  }
  if (from.plasma_ammo2() != 0) {
    set_plasma_ammo2(from.plasma_ammo2());
  }
  if (from.plasma_ammo3() != 0) {
    set_plasma_ammo3(from.plasma_ammo3());
  }
  if (from.bhas_plasmacannon() != 0) {
    set_bhas_plasmacannon(from.bhas_plasmacannon());
  }
  if (from.bhas_flamethrower() != 0) {
    set_bhas_flamethrower(from.bhas_flamethrower());
  }
  if (from.bhas_spidermine() != 0) {
    set_bhas_spidermine(from.bhas_spidermine());
  }
  if (from.bhas_gravitygun() != 0) {
    set_bhas_gravitygun(from.bhas_gravitygun());
  }
  if (from.flamethrower_ammo() != 0) {
    set_flamethrower_ammo(from.flamethrower_ammo());
  }
  if (from.spidermine_ammo() != 0) {
    set_spidermine_ammo(from.spidermine_ammo());
  }
  if (from.gravitygun_ammo() != 0) {
    set_gravitygun_ammo(from.gravitygun_ammo());
  }
  if (from.gravitygun_ammo2() != 0) {
    set_gravitygun_ammo2(from.gravitygun_ammo2());
  }
  if (from.darkmatter_ammo() != 0) {
    set_darkmatter_ammo(from.darkmatter_ammo());
  }
  if (from.bhas_darkmatter() != 0) {
    set_bhas_darkmatter(from.bhas_darkmatter());
  }
  if (from.bhas_crossbow() != 0) {
    set_bhas_crossbow(from.bhas_crossbow());
  }
  if (from.crossbow_normal_ammo() != 0) {
    set_crossbow_normal_ammo(from.crossbow_normal_ammo());
  }
  if (from.crossbow_explosive_ammo() != 0) {
    set_crossbow_explosive_ammo(from.crossbow_explosive_ammo());
  }
  if (from.crossbow_poison_ammo() != 0) {
    set_crossbow_poison_ammo(from.crossbow_poison_ammo());
  }
}

void ServerSnap_PlayerData_WeaponWheel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerSnap.PlayerData.WeaponWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSnap_PlayerData_WeaponWheel::CopyFrom(const ServerSnap_PlayerData_WeaponWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerSnap.PlayerData.WeaponWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSnap_PlayerData_WeaponWheel::IsInitialized() const {
  return true;
}

void ServerSnap_PlayerData_WeaponWheel::Swap(ServerSnap_PlayerData_WeaponWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerSnap_PlayerData_WeaponWheel::InternalSwap(ServerSnap_PlayerData_WeaponWheel* other) {
  using std::swap;
  swap(bow_normal_ammo_, other->bow_normal_ammo_);
  swap(bow_explosive_ammo_, other->bow_explosive_ammo_);
  swap(bwarclub_, other->bwarclub_);
  swap(bhas_bow_, other->bhas_bow_);
  swap(bhas_tekbow_, other->bhas_tekbow_);
  swap(bhas_spikegrenade_, other->bhas_spikegrenade_);
  swap(bow_poison_ammo_, other->bow_poison_ammo_);
  swap(tekbow_normalammo_, other->tekbow_normalammo_);
  swap(tekbow_explosiveammo_, other->tekbow_explosiveammo_);
  swap(tekbow_posionammo_, other->tekbow_posionammo_);
  swap(spikegrenade_ammo_, other->spikegrenade_ammo_);
  swap(pistol_ammo_, other->pistol_ammo_);
  swap(shotgun_ammo_, other->shotgun_ammo_);
  swap(bhas_pistol_, other->bhas_pistol_);
  swap(bhas_shotgun_, other->bhas_shotgun_);
  swap(bhas_flecheete_, other->bhas_flecheete_);
  swap(bhas_rocketlauncher_, other->bhas_rocketlauncher_);
  swap(fleechete_ammo_, other->fleechete_ammo_);
  swap(minigun_ammo_, other->minigun_ammo_);
  swap(rocket_ammo1_, other->rocket_ammo1_);
  swap(rocket_ammo2_, other->rocket_ammo2_);
  swap(rocket_ammo3_, other->rocket_ammo3_);
  swap(plasma_ammo1_, other->plasma_ammo1_);
  swap(plasma_ammo2_, other->plasma_ammo2_);
  swap(plasma_ammo3_, other->plasma_ammo3_);
  swap(bhas_plasmacannon_, other->bhas_plasmacannon_);
  swap(bhas_flamethrower_, other->bhas_flamethrower_);
  swap(bhas_spidermine_, other->bhas_spidermine_);
  swap(bhas_gravitygun_, other->bhas_gravitygun_);
  swap(flamethrower_ammo_, other->flamethrower_ammo_);
  swap(spidermine_ammo_, other->spidermine_ammo_);
  swap(gravitygun_ammo_, other->gravitygun_ammo_);
  swap(gravitygun_ammo2_, other->gravitygun_ammo2_);
  swap(darkmatter_ammo_, other->darkmatter_ammo_);
  swap(bhas_darkmatter_, other->bhas_darkmatter_);
  swap(bhas_crossbow_, other->bhas_crossbow_);
  swap(crossbow_normal_ammo_, other->crossbow_normal_ammo_);
  swap(crossbow_explosive_ammo_, other->crossbow_explosive_ammo_);
  swap(crossbow_poison_ammo_, other->crossbow_poison_ammo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerSnap_PlayerData_WeaponWheel::GetMetadata() const {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerSnap_PlayerData_WeaponWheel

// bool bWarClub = 1;
void ServerSnap_PlayerData_WeaponWheel::clear_bwarclub() {
  bwarclub_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bwarclub() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bWarClub)
  return bwarclub_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bwarclub(bool value) {
  
  bwarclub_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bWarClub)
}

// bool bHas_Bow = 2;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_bow() {
  bhas_bow_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_bow() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_Bow)
  return bhas_bow_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_bow(bool value) {
  
  bhas_bow_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_Bow)
}

// int32 bow_Normal_Ammo = 3;
void ServerSnap_PlayerData_WeaponWheel::clear_bow_normal_ammo() {
  bow_normal_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::bow_normal_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bow_Normal_Ammo)
  return bow_normal_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bow_normal_ammo(::google::protobuf::int32 value) {
  
  bow_normal_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bow_Normal_Ammo)
}

// int32 bow_Explosive_Ammo = 4;
void ServerSnap_PlayerData_WeaponWheel::clear_bow_explosive_ammo() {
  bow_explosive_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::bow_explosive_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bow_Explosive_Ammo)
  return bow_explosive_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bow_explosive_ammo(::google::protobuf::int32 value) {
  
  bow_explosive_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bow_Explosive_Ammo)
}

// int32 bow_Poison_Ammo = 5;
void ServerSnap_PlayerData_WeaponWheel::clear_bow_poison_ammo() {
  bow_poison_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::bow_poison_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bow_Poison_Ammo)
  return bow_poison_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bow_poison_ammo(::google::protobuf::int32 value) {
  
  bow_poison_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bow_Poison_Ammo)
}

// bool bHas_TekBow = 6;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_tekbow() {
  bhas_tekbow_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_tekbow() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_TekBow)
  return bhas_tekbow_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_tekbow(bool value) {
  
  bhas_tekbow_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_TekBow)
}

// int32 TekBow_NormalAmmo = 7;
void ServerSnap_PlayerData_WeaponWheel::clear_tekbow_normalammo() {
  tekbow_normalammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::tekbow_normalammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.TekBow_NormalAmmo)
  return tekbow_normalammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_tekbow_normalammo(::google::protobuf::int32 value) {
  
  tekbow_normalammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.TekBow_NormalAmmo)
}

// int32 TekBow_ExplosiveAmmo = 8;
void ServerSnap_PlayerData_WeaponWheel::clear_tekbow_explosiveammo() {
  tekbow_explosiveammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::tekbow_explosiveammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.TekBow_ExplosiveAmmo)
  return tekbow_explosiveammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_tekbow_explosiveammo(::google::protobuf::int32 value) {
  
  tekbow_explosiveammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.TekBow_ExplosiveAmmo)
}

// int32 TekBow_PosionAmmo = 9;
void ServerSnap_PlayerData_WeaponWheel::clear_tekbow_posionammo() {
  tekbow_posionammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::tekbow_posionammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.TekBow_PosionAmmo)
  return tekbow_posionammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_tekbow_posionammo(::google::protobuf::int32 value) {
  
  tekbow_posionammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.TekBow_PosionAmmo)
}

// bool bHas_SpikeGrenade = 10;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_spikegrenade() {
  bhas_spikegrenade_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_spikegrenade() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_SpikeGrenade)
  return bhas_spikegrenade_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_spikegrenade(bool value) {
  
  bhas_spikegrenade_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_SpikeGrenade)
}

// int32 SpikeGrenade_Ammo = 11;
void ServerSnap_PlayerData_WeaponWheel::clear_spikegrenade_ammo() {
  spikegrenade_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::spikegrenade_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.SpikeGrenade_Ammo)
  return spikegrenade_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_spikegrenade_ammo(::google::protobuf::int32 value) {
  
  spikegrenade_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.SpikeGrenade_Ammo)
}

// bool bHas_Pistol = 12;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_pistol() {
  bhas_pistol_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_pistol() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_Pistol)
  return bhas_pistol_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_pistol(bool value) {
  
  bhas_pistol_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_Pistol)
}

// int32 Pistol_Ammo = 13;
void ServerSnap_PlayerData_WeaponWheel::clear_pistol_ammo() {
  pistol_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::pistol_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Pistol_Ammo)
  return pistol_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_pistol_ammo(::google::protobuf::int32 value) {
  
  pistol_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Pistol_Ammo)
}

// bool bHas_ShotGun = 14;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_shotgun() {
  bhas_shotgun_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_shotgun() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_ShotGun)
  return bhas_shotgun_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_shotgun(bool value) {
  
  bhas_shotgun_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_ShotGun)
}

// int32 ShotGun_Ammo = 15;
void ServerSnap_PlayerData_WeaponWheel::clear_shotgun_ammo() {
  shotgun_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::shotgun_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.ShotGun_Ammo)
  return shotgun_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_shotgun_ammo(::google::protobuf::int32 value) {
  
  shotgun_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.ShotGun_Ammo)
}

// bool bHas_Flecheete = 16;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_flecheete() {
  bhas_flecheete_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_flecheete() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_Flecheete)
  return bhas_flecheete_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_flecheete(bool value) {
  
  bhas_flecheete_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_Flecheete)
}

// int32 Fleechete_Ammo = 17;
void ServerSnap_PlayerData_WeaponWheel::clear_fleechete_ammo() {
  fleechete_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::fleechete_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Fleechete_Ammo)
  return fleechete_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_fleechete_ammo(::google::protobuf::int32 value) {
  
  fleechete_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Fleechete_Ammo)
}

// int32 MiniGun_Ammo = 18;
void ServerSnap_PlayerData_WeaponWheel::clear_minigun_ammo() {
  minigun_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::minigun_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.MiniGun_Ammo)
  return minigun_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_minigun_ammo(::google::protobuf::int32 value) {
  
  minigun_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.MiniGun_Ammo)
}

// bool bHas_RocketLauncher = 19;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_rocketlauncher() {
  bhas_rocketlauncher_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_rocketlauncher() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_RocketLauncher)
  return bhas_rocketlauncher_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_rocketlauncher(bool value) {
  
  bhas_rocketlauncher_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_RocketLauncher)
}

// int32 Rocket_Ammo1 = 20;
void ServerSnap_PlayerData_WeaponWheel::clear_rocket_ammo1() {
  rocket_ammo1_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::rocket_ammo1() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo1)
  return rocket_ammo1_;
}
void ServerSnap_PlayerData_WeaponWheel::set_rocket_ammo1(::google::protobuf::int32 value) {
  
  rocket_ammo1_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo1)
}

// int32 Rocket_Ammo2 = 21;
void ServerSnap_PlayerData_WeaponWheel::clear_rocket_ammo2() {
  rocket_ammo2_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::rocket_ammo2() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo2)
  return rocket_ammo2_;
}
void ServerSnap_PlayerData_WeaponWheel::set_rocket_ammo2(::google::protobuf::int32 value) {
  
  rocket_ammo2_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo2)
}

// int32 Rocket_Ammo3 = 22;
void ServerSnap_PlayerData_WeaponWheel::clear_rocket_ammo3() {
  rocket_ammo3_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::rocket_ammo3() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo3)
  return rocket_ammo3_;
}
void ServerSnap_PlayerData_WeaponWheel::set_rocket_ammo3(::google::protobuf::int32 value) {
  
  rocket_ammo3_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo3)
}

// bool bHas_PlasmaCannon = 23;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_plasmacannon() {
  bhas_plasmacannon_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_plasmacannon() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_PlasmaCannon)
  return bhas_plasmacannon_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_plasmacannon(bool value) {
  
  bhas_plasmacannon_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_PlasmaCannon)
}

// int32 Plasma_Ammo1 = 24;
void ServerSnap_PlayerData_WeaponWheel::clear_plasma_ammo1() {
  plasma_ammo1_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::plasma_ammo1() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo1)
  return plasma_ammo1_;
}
void ServerSnap_PlayerData_WeaponWheel::set_plasma_ammo1(::google::protobuf::int32 value) {
  
  plasma_ammo1_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo1)
}

// int32 Plasma_Ammo2 = 25;
void ServerSnap_PlayerData_WeaponWheel::clear_plasma_ammo2() {
  plasma_ammo2_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::plasma_ammo2() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo2)
  return plasma_ammo2_;
}
void ServerSnap_PlayerData_WeaponWheel::set_plasma_ammo2(::google::protobuf::int32 value) {
  
  plasma_ammo2_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo2)
}

// int32 Plasma_Ammo3 = 26;
void ServerSnap_PlayerData_WeaponWheel::clear_plasma_ammo3() {
  plasma_ammo3_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::plasma_ammo3() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo3)
  return plasma_ammo3_;
}
void ServerSnap_PlayerData_WeaponWheel::set_plasma_ammo3(::google::protobuf::int32 value) {
  
  plasma_ammo3_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo3)
}

// bool bHas_FlameThrower = 27;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_flamethrower() {
  bhas_flamethrower_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_flamethrower() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_FlameThrower)
  return bhas_flamethrower_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_flamethrower(bool value) {
  
  bhas_flamethrower_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_FlameThrower)
}

// int32 FlameThrower_Ammo = 28;
void ServerSnap_PlayerData_WeaponWheel::clear_flamethrower_ammo() {
  flamethrower_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::flamethrower_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.FlameThrower_Ammo)
  return flamethrower_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_flamethrower_ammo(::google::protobuf::int32 value) {
  
  flamethrower_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.FlameThrower_Ammo)
}

// bool bHas_SpiderMine = 29;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_spidermine() {
  bhas_spidermine_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_spidermine() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_SpiderMine)
  return bhas_spidermine_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_spidermine(bool value) {
  
  bhas_spidermine_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_SpiderMine)
}

// int32 SpiderMine_Ammo = 30;
void ServerSnap_PlayerData_WeaponWheel::clear_spidermine_ammo() {
  spidermine_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::spidermine_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.SpiderMine_Ammo)
  return spidermine_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_spidermine_ammo(::google::protobuf::int32 value) {
  
  spidermine_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.SpiderMine_Ammo)
}

// bool bHas_GravityGun = 31;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_gravitygun() {
  bhas_gravitygun_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_gravitygun() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_GravityGun)
  return bhas_gravitygun_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_gravitygun(bool value) {
  
  bhas_gravitygun_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_GravityGun)
}

// int32 GravityGun_Ammo = 32;
void ServerSnap_PlayerData_WeaponWheel::clear_gravitygun_ammo() {
  gravitygun_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::gravitygun_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.GravityGun_Ammo)
  return gravitygun_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_gravitygun_ammo(::google::protobuf::int32 value) {
  
  gravitygun_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.GravityGun_Ammo)
}

// int32 GravityGun_Ammo2 = 33;
void ServerSnap_PlayerData_WeaponWheel::clear_gravitygun_ammo2() {
  gravitygun_ammo2_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::gravitygun_ammo2() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.GravityGun_Ammo2)
  return gravitygun_ammo2_;
}
void ServerSnap_PlayerData_WeaponWheel::set_gravitygun_ammo2(::google::protobuf::int32 value) {
  
  gravitygun_ammo2_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.GravityGun_Ammo2)
}

// bool bHas_DarkMatter = 34;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_darkmatter() {
  bhas_darkmatter_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_darkmatter() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_DarkMatter)
  return bhas_darkmatter_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_darkmatter(bool value) {
  
  bhas_darkmatter_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_DarkMatter)
}

// int32 DarkMatter_Ammo = 35;
void ServerSnap_PlayerData_WeaponWheel::clear_darkmatter_ammo() {
  darkmatter_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::darkmatter_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.DarkMatter_Ammo)
  return darkmatter_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_darkmatter_ammo(::google::protobuf::int32 value) {
  
  darkmatter_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.DarkMatter_Ammo)
}

// bool bHas_CrossBow = 36;
void ServerSnap_PlayerData_WeaponWheel::clear_bhas_crossbow() {
  bhas_crossbow_ = false;
}
bool ServerSnap_PlayerData_WeaponWheel::bhas_crossbow() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_CrossBow)
  return bhas_crossbow_;
}
void ServerSnap_PlayerData_WeaponWheel::set_bhas_crossbow(bool value) {
  
  bhas_crossbow_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_CrossBow)
}

// int32 CrossBow_Normal_Ammo = 37;
void ServerSnap_PlayerData_WeaponWheel::clear_crossbow_normal_ammo() {
  crossbow_normal_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::crossbow_normal_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.CrossBow_Normal_Ammo)
  return crossbow_normal_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_crossbow_normal_ammo(::google::protobuf::int32 value) {
  
  crossbow_normal_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.CrossBow_Normal_Ammo)
}

// int32 CrossBow_Explosive_Ammo = 38;
void ServerSnap_PlayerData_WeaponWheel::clear_crossbow_explosive_ammo() {
  crossbow_explosive_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::crossbow_explosive_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.CrossBow_Explosive_Ammo)
  return crossbow_explosive_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_crossbow_explosive_ammo(::google::protobuf::int32 value) {
  
  crossbow_explosive_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.CrossBow_Explosive_Ammo)
}

// int32 CrossBow_Poison_Ammo = 39;
void ServerSnap_PlayerData_WeaponWheel::clear_crossbow_poison_ammo() {
  crossbow_poison_ammo_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData_WeaponWheel::crossbow_poison_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.CrossBow_Poison_Ammo)
  return crossbow_poison_ammo_;
}
void ServerSnap_PlayerData_WeaponWheel::set_crossbow_poison_ammo(::google::protobuf::int32 value) {
  
  crossbow_poison_ammo_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.CrossBow_Poison_Ammo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerSnap_PlayerData::kXFieldNumber;
const int ServerSnap_PlayerData::kYFieldNumber;
const int ServerSnap_PlayerData::kZFieldNumber;
const int ServerSnap_PlayerData::kViewXFieldNumber;
const int ServerSnap_PlayerData::kViewYFieldNumber;
const int ServerSnap_PlayerData::kWalkForwardFieldNumber;
const int ServerSnap_PlayerData::kWalkBackwardFieldNumber;
const int ServerSnap_PlayerData::kWalkLeftFieldNumber;
const int ServerSnap_PlayerData::kWalkRightFieldNumber;
const int ServerSnap_PlayerData::kJumpFieldNumber;
const int ServerSnap_PlayerData::kCrouchFieldNumber;
const int ServerSnap_PlayerData::kFireFieldNumber;
const int ServerSnap_PlayerData::kFireHoldFieldNumber;
const int ServerSnap_PlayerData::kFireHoldTimeFieldNumber;
const int ServerSnap_PlayerData::kFireReleaseFieldNumber;
const int ServerSnap_PlayerData::kFireReleaseTimeFieldNumber;
const int ServerSnap_PlayerData::kMaxHealthFieldNumber;
const int ServerSnap_PlayerData::kCurrentHealthFieldNumber;
const int ServerSnap_PlayerData::kWeaponSwitchFieldNumber;
const int ServerSnap_PlayerData::kWeaponSwitchTimeFieldNumber;
const int ServerSnap_PlayerData::kWeaponSlotFieldNumber;
const int ServerSnap_PlayerData::kWeaponsFieldNumber;
const int ServerSnap_PlayerData::kIndexFieldNumber;
const int ServerSnap_PlayerData::kDeathTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerSnap_PlayerData::ServerSnap_PlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t4mp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerSnap.PlayerData)
}
ServerSnap_PlayerData::ServerSnap_PlayerData(const ServerSnap_PlayerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weapons()) {
    weapons_ = new ::ServerSnap_PlayerData_WeaponWheel(*from.weapons_);
  } else {
    weapons_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&death_type_) -
    reinterpret_cast<char*>(&x_)) + sizeof(death_type_));
  // @@protoc_insertion_point(copy_constructor:ServerSnap.PlayerData)
}

void ServerSnap_PlayerData::SharedCtor() {
  ::memset(&weapons_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&death_type_) -
      reinterpret_cast<char*>(&weapons_)) + sizeof(death_type_));
  _cached_size_ = 0;
}

ServerSnap_PlayerData::~ServerSnap_PlayerData() {
  // @@protoc_insertion_point(destructor:ServerSnap.PlayerData)
  SharedDtor();
}

void ServerSnap_PlayerData::SharedDtor() {
  if (this != internal_default_instance()) delete weapons_;
}

void ServerSnap_PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerSnap_PlayerData::descriptor() {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerSnap_PlayerData& ServerSnap_PlayerData::default_instance() {
  protobuf_t4mp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerSnap_PlayerData* ServerSnap_PlayerData::New(::google::protobuf::Arena* arena) const {
  ServerSnap_PlayerData* n = new ServerSnap_PlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerSnap_PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerSnap.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && weapons_ != NULL) {
    delete weapons_;
  }
  weapons_ = NULL;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&death_type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(death_type_));
  _internal_metadata_.Clear();
}

bool ServerSnap_PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerSnap.PlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float X = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ViewX = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &viewx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ViewY = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &viewy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Walk_forward = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Walk_backward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Walk_left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Walk_right = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walk_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Jump = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Crouch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crouch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Fire = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Fire_hold = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_hold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Fire_hold_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fire_hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Fire_release = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_release_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Fire_release_time = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fire_release_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Max_health = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Current_health = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Weapon_switch = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Weapon_switch_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weapon_switch_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Weapon_slot = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ServerSnap.PlayerData.WeaponWheel weapons = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 death_type = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerSnap.PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerSnap.PlayerData)
  return false;
#undef DO_
}

void ServerSnap_PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerSnap.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float Z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float ViewX = 4;
  if (this->viewx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->viewx(), output);
  }

  // float ViewY = 5;
  if (this->viewy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->viewy(), output);
  }

  // bool Walk_forward = 6;
  if (this->walk_forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->walk_forward(), output);
  }

  // bool Walk_backward = 7;
  if (this->walk_backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->walk_backward(), output);
  }

  // bool Walk_left = 8;
  if (this->walk_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->walk_left(), output);
  }

  // bool Walk_right = 9;
  if (this->walk_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->walk_right(), output);
  }

  // bool Jump = 10;
  if (this->jump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->jump(), output);
  }

  // bool Crouch = 11;
  if (this->crouch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->crouch(), output);
  }

  // bool Fire = 12;
  if (this->fire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->fire(), output);
  }

  // bool Fire_hold = 13;
  if (this->fire_hold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->fire_hold(), output);
  }

  // float Fire_hold_time = 14;
  if (this->fire_hold_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->fire_hold_time(), output);
  }

  // bool Fire_release = 15;
  if (this->fire_release() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fire_release(), output);
  }

  // float Fire_release_time = 16;
  if (this->fire_release_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->fire_release_time(), output);
  }

  // float Max_health = 17;
  if (this->max_health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->max_health(), output);
  }

  // float Current_health = 18;
  if (this->current_health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->current_health(), output);
  }

  // int32 Weapon_switch = 19;
  if (this->weapon_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->weapon_switch(), output);
  }

  // float Weapon_switch_time = 20;
  if (this->weapon_switch_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->weapon_switch_time(), output);
  }

  // int32 Weapon_slot = 21;
  if (this->weapon_slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->weapon_slot(), output);
  }

  // .ServerSnap.PlayerData.WeaponWheel weapons = 22;
  if (this->has_weapons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->weapons_, output);
  }

  // int32 index = 23;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->index(), output);
  }

  // int32 death_type = 24;
  if (this->death_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->death_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerSnap.PlayerData)
}

::google::protobuf::uint8* ServerSnap_PlayerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerSnap.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float Z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float ViewX = 4;
  if (this->viewx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->viewx(), target);
  }

  // float ViewY = 5;
  if (this->viewy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->viewy(), target);
  }

  // bool Walk_forward = 6;
  if (this->walk_forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->walk_forward(), target);
  }

  // bool Walk_backward = 7;
  if (this->walk_backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->walk_backward(), target);
  }

  // bool Walk_left = 8;
  if (this->walk_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->walk_left(), target);
  }

  // bool Walk_right = 9;
  if (this->walk_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->walk_right(), target);
  }

  // bool Jump = 10;
  if (this->jump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->jump(), target);
  }

  // bool Crouch = 11;
  if (this->crouch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->crouch(), target);
  }

  // bool Fire = 12;
  if (this->fire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->fire(), target);
  }

  // bool Fire_hold = 13;
  if (this->fire_hold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->fire_hold(), target);
  }

  // float Fire_hold_time = 14;
  if (this->fire_hold_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->fire_hold_time(), target);
  }

  // bool Fire_release = 15;
  if (this->fire_release() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fire_release(), target);
  }

  // float Fire_release_time = 16;
  if (this->fire_release_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->fire_release_time(), target);
  }

  // float Max_health = 17;
  if (this->max_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->max_health(), target);
  }

  // float Current_health = 18;
  if (this->current_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->current_health(), target);
  }

  // int32 Weapon_switch = 19;
  if (this->weapon_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->weapon_switch(), target);
  }

  // float Weapon_switch_time = 20;
  if (this->weapon_switch_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->weapon_switch_time(), target);
  }

  // int32 Weapon_slot = 21;
  if (this->weapon_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->weapon_slot(), target);
  }

  // .ServerSnap.PlayerData.WeaponWheel weapons = 22;
  if (this->has_weapons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->weapons_, deterministic, target);
  }

  // int32 index = 23;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->index(), target);
  }

  // int32 death_type = 24;
  if (this->death_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->death_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerSnap.PlayerData)
  return target;
}

size_t ServerSnap_PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerSnap.PlayerData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ServerSnap.PlayerData.WeaponWheel weapons = 22;
  if (this->has_weapons()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weapons_);
  }

  // float X = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float Z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float ViewX = 4;
  if (this->viewx() != 0) {
    total_size += 1 + 4;
  }

  // float ViewY = 5;
  if (this->viewy() != 0) {
    total_size += 1 + 4;
  }

  // bool Walk_forward = 6;
  if (this->walk_forward() != 0) {
    total_size += 1 + 1;
  }

  // bool Walk_backward = 7;
  if (this->walk_backward() != 0) {
    total_size += 1 + 1;
  }

  // bool Walk_left = 8;
  if (this->walk_left() != 0) {
    total_size += 1 + 1;
  }

  // bool Walk_right = 9;
  if (this->walk_right() != 0) {
    total_size += 1 + 1;
  }

  // bool Jump = 10;
  if (this->jump() != 0) {
    total_size += 1 + 1;
  }

  // bool Crouch = 11;
  if (this->crouch() != 0) {
    total_size += 1 + 1;
  }

  // bool Fire = 12;
  if (this->fire() != 0) {
    total_size += 1 + 1;
  }

  // bool Fire_hold = 13;
  if (this->fire_hold() != 0) {
    total_size += 1 + 1;
  }

  // float Fire_hold_time = 14;
  if (this->fire_hold_time() != 0) {
    total_size += 1 + 4;
  }

  // bool Fire_release = 15;
  if (this->fire_release() != 0) {
    total_size += 1 + 1;
  }

  // float Fire_release_time = 16;
  if (this->fire_release_time() != 0) {
    total_size += 2 + 4;
  }

  // float Max_health = 17;
  if (this->max_health() != 0) {
    total_size += 2 + 4;
  }

  // float Current_health = 18;
  if (this->current_health() != 0) {
    total_size += 2 + 4;
  }

  // int32 Weapon_switch = 19;
  if (this->weapon_switch() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weapon_switch());
  }

  // float Weapon_switch_time = 20;
  if (this->weapon_switch_time() != 0) {
    total_size += 2 + 4;
  }

  // int32 Weapon_slot = 21;
  if (this->weapon_slot() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weapon_slot());
  }

  // int32 index = 23;
  if (this->index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // int32 death_type = 24;
  if (this->death_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->death_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerSnap_PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerSnap.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerSnap_PlayerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerSnap_PlayerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerSnap.PlayerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerSnap.PlayerData)
    MergeFrom(*source);
  }
}

void ServerSnap_PlayerData::MergeFrom(const ServerSnap_PlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerSnap.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weapons()) {
    mutable_weapons()->::ServerSnap_PlayerData_WeaponWheel::MergeFrom(from.weapons());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.viewx() != 0) {
    set_viewx(from.viewx());
  }
  if (from.viewy() != 0) {
    set_viewy(from.viewy());
  }
  if (from.walk_forward() != 0) {
    set_walk_forward(from.walk_forward());
  }
  if (from.walk_backward() != 0) {
    set_walk_backward(from.walk_backward());
  }
  if (from.walk_left() != 0) {
    set_walk_left(from.walk_left());
  }
  if (from.walk_right() != 0) {
    set_walk_right(from.walk_right());
  }
  if (from.jump() != 0) {
    set_jump(from.jump());
  }
  if (from.crouch() != 0) {
    set_crouch(from.crouch());
  }
  if (from.fire() != 0) {
    set_fire(from.fire());
  }
  if (from.fire_hold() != 0) {
    set_fire_hold(from.fire_hold());
  }
  if (from.fire_hold_time() != 0) {
    set_fire_hold_time(from.fire_hold_time());
  }
  if (from.fire_release() != 0) {
    set_fire_release(from.fire_release());
  }
  if (from.fire_release_time() != 0) {
    set_fire_release_time(from.fire_release_time());
  }
  if (from.max_health() != 0) {
    set_max_health(from.max_health());
  }
  if (from.current_health() != 0) {
    set_current_health(from.current_health());
  }
  if (from.weapon_switch() != 0) {
    set_weapon_switch(from.weapon_switch());
  }
  if (from.weapon_switch_time() != 0) {
    set_weapon_switch_time(from.weapon_switch_time());
  }
  if (from.weapon_slot() != 0) {
    set_weapon_slot(from.weapon_slot());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.death_type() != 0) {
    set_death_type(from.death_type());
  }
}

void ServerSnap_PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerSnap.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSnap_PlayerData::CopyFrom(const ServerSnap_PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerSnap.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSnap_PlayerData::IsInitialized() const {
  return true;
}

void ServerSnap_PlayerData::Swap(ServerSnap_PlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerSnap_PlayerData::InternalSwap(ServerSnap_PlayerData* other) {
  using std::swap;
  swap(weapons_, other->weapons_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(viewx_, other->viewx_);
  swap(viewy_, other->viewy_);
  swap(walk_forward_, other->walk_forward_);
  swap(walk_backward_, other->walk_backward_);
  swap(walk_left_, other->walk_left_);
  swap(walk_right_, other->walk_right_);
  swap(jump_, other->jump_);
  swap(crouch_, other->crouch_);
  swap(fire_, other->fire_);
  swap(fire_hold_, other->fire_hold_);
  swap(fire_hold_time_, other->fire_hold_time_);
  swap(fire_release_, other->fire_release_);
  swap(fire_release_time_, other->fire_release_time_);
  swap(max_health_, other->max_health_);
  swap(current_health_, other->current_health_);
  swap(weapon_switch_, other->weapon_switch_);
  swap(weapon_switch_time_, other->weapon_switch_time_);
  swap(weapon_slot_, other->weapon_slot_);
  swap(index_, other->index_);
  swap(death_type_, other->death_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerSnap_PlayerData::GetMetadata() const {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerSnap_PlayerData

// float X = 1;
void ServerSnap_PlayerData::clear_x() {
  x_ = 0;
}
float ServerSnap_PlayerData::x() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.X)
  return x_;
}
void ServerSnap_PlayerData::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.X)
}

// float Y = 2;
void ServerSnap_PlayerData::clear_y() {
  y_ = 0;
}
float ServerSnap_PlayerData::y() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Y)
  return y_;
}
void ServerSnap_PlayerData::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Y)
}

// float Z = 3;
void ServerSnap_PlayerData::clear_z() {
  z_ = 0;
}
float ServerSnap_PlayerData::z() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Z)
  return z_;
}
void ServerSnap_PlayerData::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Z)
}

// float ViewX = 4;
void ServerSnap_PlayerData::clear_viewx() {
  viewx_ = 0;
}
float ServerSnap_PlayerData::viewx() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.ViewX)
  return viewx_;
}
void ServerSnap_PlayerData::set_viewx(float value) {
  
  viewx_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.ViewX)
}

// float ViewY = 5;
void ServerSnap_PlayerData::clear_viewy() {
  viewy_ = 0;
}
float ServerSnap_PlayerData::viewy() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.ViewY)
  return viewy_;
}
void ServerSnap_PlayerData::set_viewy(float value) {
  
  viewy_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.ViewY)
}

// bool Walk_forward = 6;
void ServerSnap_PlayerData::clear_walk_forward() {
  walk_forward_ = false;
}
bool ServerSnap_PlayerData::walk_forward() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Walk_forward)
  return walk_forward_;
}
void ServerSnap_PlayerData::set_walk_forward(bool value) {
  
  walk_forward_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Walk_forward)
}

// bool Walk_backward = 7;
void ServerSnap_PlayerData::clear_walk_backward() {
  walk_backward_ = false;
}
bool ServerSnap_PlayerData::walk_backward() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Walk_backward)
  return walk_backward_;
}
void ServerSnap_PlayerData::set_walk_backward(bool value) {
  
  walk_backward_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Walk_backward)
}

// bool Walk_left = 8;
void ServerSnap_PlayerData::clear_walk_left() {
  walk_left_ = false;
}
bool ServerSnap_PlayerData::walk_left() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Walk_left)
  return walk_left_;
}
void ServerSnap_PlayerData::set_walk_left(bool value) {
  
  walk_left_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Walk_left)
}

// bool Walk_right = 9;
void ServerSnap_PlayerData::clear_walk_right() {
  walk_right_ = false;
}
bool ServerSnap_PlayerData::walk_right() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Walk_right)
  return walk_right_;
}
void ServerSnap_PlayerData::set_walk_right(bool value) {
  
  walk_right_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Walk_right)
}

// bool Jump = 10;
void ServerSnap_PlayerData::clear_jump() {
  jump_ = false;
}
bool ServerSnap_PlayerData::jump() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Jump)
  return jump_;
}
void ServerSnap_PlayerData::set_jump(bool value) {
  
  jump_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Jump)
}

// bool Crouch = 11;
void ServerSnap_PlayerData::clear_crouch() {
  crouch_ = false;
}
bool ServerSnap_PlayerData::crouch() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Crouch)
  return crouch_;
}
void ServerSnap_PlayerData::set_crouch(bool value) {
  
  crouch_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Crouch)
}

// bool Fire = 12;
void ServerSnap_PlayerData::clear_fire() {
  fire_ = false;
}
bool ServerSnap_PlayerData::fire() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire)
  return fire_;
}
void ServerSnap_PlayerData::set_fire(bool value) {
  
  fire_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire)
}

// bool Fire_hold = 13;
void ServerSnap_PlayerData::clear_fire_hold() {
  fire_hold_ = false;
}
bool ServerSnap_PlayerData::fire_hold() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire_hold)
  return fire_hold_;
}
void ServerSnap_PlayerData::set_fire_hold(bool value) {
  
  fire_hold_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire_hold)
}

// float Fire_hold_time = 14;
void ServerSnap_PlayerData::clear_fire_hold_time() {
  fire_hold_time_ = 0;
}
float ServerSnap_PlayerData::fire_hold_time() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire_hold_time)
  return fire_hold_time_;
}
void ServerSnap_PlayerData::set_fire_hold_time(float value) {
  
  fire_hold_time_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire_hold_time)
}

// bool Fire_release = 15;
void ServerSnap_PlayerData::clear_fire_release() {
  fire_release_ = false;
}
bool ServerSnap_PlayerData::fire_release() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire_release)
  return fire_release_;
}
void ServerSnap_PlayerData::set_fire_release(bool value) {
  
  fire_release_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire_release)
}

// float Fire_release_time = 16;
void ServerSnap_PlayerData::clear_fire_release_time() {
  fire_release_time_ = 0;
}
float ServerSnap_PlayerData::fire_release_time() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire_release_time)
  return fire_release_time_;
}
void ServerSnap_PlayerData::set_fire_release_time(float value) {
  
  fire_release_time_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire_release_time)
}

// float Max_health = 17;
void ServerSnap_PlayerData::clear_max_health() {
  max_health_ = 0;
}
float ServerSnap_PlayerData::max_health() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Max_health)
  return max_health_;
}
void ServerSnap_PlayerData::set_max_health(float value) {
  
  max_health_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Max_health)
}

// float Current_health = 18;
void ServerSnap_PlayerData::clear_current_health() {
  current_health_ = 0;
}
float ServerSnap_PlayerData::current_health() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Current_health)
  return current_health_;
}
void ServerSnap_PlayerData::set_current_health(float value) {
  
  current_health_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Current_health)
}

// int32 Weapon_switch = 19;
void ServerSnap_PlayerData::clear_weapon_switch() {
  weapon_switch_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData::weapon_switch() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Weapon_switch)
  return weapon_switch_;
}
void ServerSnap_PlayerData::set_weapon_switch(::google::protobuf::int32 value) {
  
  weapon_switch_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Weapon_switch)
}

// float Weapon_switch_time = 20;
void ServerSnap_PlayerData::clear_weapon_switch_time() {
  weapon_switch_time_ = 0;
}
float ServerSnap_PlayerData::weapon_switch_time() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Weapon_switch_time)
  return weapon_switch_time_;
}
void ServerSnap_PlayerData::set_weapon_switch_time(float value) {
  
  weapon_switch_time_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Weapon_switch_time)
}

// int32 Weapon_slot = 21;
void ServerSnap_PlayerData::clear_weapon_slot() {
  weapon_slot_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData::weapon_slot() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Weapon_slot)
  return weapon_slot_;
}
void ServerSnap_PlayerData::set_weapon_slot(::google::protobuf::int32 value) {
  
  weapon_slot_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Weapon_slot)
}

// .ServerSnap.PlayerData.WeaponWheel weapons = 22;
bool ServerSnap_PlayerData::has_weapons() const {
  return this != internal_default_instance() && weapons_ != NULL;
}
void ServerSnap_PlayerData::clear_weapons() {
  if (GetArenaNoVirtual() == NULL && weapons_ != NULL) delete weapons_;
  weapons_ = NULL;
}
const ::ServerSnap_PlayerData_WeaponWheel& ServerSnap_PlayerData::weapons() const {
  const ::ServerSnap_PlayerData_WeaponWheel* p = weapons_;
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.weapons)
  return p != NULL ? *p : *reinterpret_cast<const ::ServerSnap_PlayerData_WeaponWheel*>(
      &::_ServerSnap_PlayerData_WeaponWheel_default_instance_);
}
::ServerSnap_PlayerData_WeaponWheel* ServerSnap_PlayerData::mutable_weapons() {
  
  if (weapons_ == NULL) {
    weapons_ = new ::ServerSnap_PlayerData_WeaponWheel;
  }
  // @@protoc_insertion_point(field_mutable:ServerSnap.PlayerData.weapons)
  return weapons_;
}
::ServerSnap_PlayerData_WeaponWheel* ServerSnap_PlayerData::release_weapons() {
  // @@protoc_insertion_point(field_release:ServerSnap.PlayerData.weapons)
  
  ::ServerSnap_PlayerData_WeaponWheel* temp = weapons_;
  weapons_ = NULL;
  return temp;
}
void ServerSnap_PlayerData::set_allocated_weapons(::ServerSnap_PlayerData_WeaponWheel* weapons) {
  delete weapons_;
  weapons_ = weapons;
  if (weapons) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSnap.PlayerData.weapons)
}

// int32 index = 23;
void ServerSnap_PlayerData::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData::index() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.index)
  return index_;
}
void ServerSnap_PlayerData::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.index)
}

// int32 death_type = 24;
void ServerSnap_PlayerData::clear_death_type() {
  death_type_ = 0;
}
::google::protobuf::int32 ServerSnap_PlayerData::death_type() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.death_type)
  return death_type_;
}
void ServerSnap_PlayerData::set_death_type(::google::protobuf::int32 value) {
  
  death_type_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.death_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerSnap::kPlayerFieldNumber;
const int ServerSnap::kPacketSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerSnap::ServerSnap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_t4mp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerSnap)
}
ServerSnap::ServerSnap(const ServerSnap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_(from.player_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packet_sequence_ = from.packet_sequence_;
  // @@protoc_insertion_point(copy_constructor:ServerSnap)
}

void ServerSnap::SharedCtor() {
  packet_sequence_ = 0;
  _cached_size_ = 0;
}

ServerSnap::~ServerSnap() {
  // @@protoc_insertion_point(destructor:ServerSnap)
  SharedDtor();
}

void ServerSnap::SharedDtor() {
}

void ServerSnap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerSnap::descriptor() {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerSnap& ServerSnap::default_instance() {
  protobuf_t4mp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerSnap* ServerSnap::New(::google::protobuf::Arena* arena) const {
  ServerSnap* n = new ServerSnap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerSnap::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerSnap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.Clear();
  packet_sequence_ = 0;
  _internal_metadata_.Clear();
}

bool ServerSnap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerSnap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerSnap.PlayerData player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 packet_sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerSnap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerSnap)
  return false;
#undef DO_
}

void ServerSnap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerSnap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerSnap.PlayerData player = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(static_cast<int>(i)), output);
  }

  // int32 packet_sequence = 2;
  if (this->packet_sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->packet_sequence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerSnap)
}

::google::protobuf::uint8* ServerSnap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerSnap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerSnap.PlayerData player = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->player(static_cast<int>(i)), deterministic, target);
  }

  // int32 packet_sequence = 2;
  if (this->packet_sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->packet_sequence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerSnap)
  return target;
}

size_t ServerSnap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerSnap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ServerSnap.PlayerData player = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->player_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player(static_cast<int>(i)));
    }
  }

  // int32 packet_sequence = 2;
  if (this->packet_sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packet_sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerSnap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerSnap)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerSnap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerSnap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerSnap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerSnap)
    MergeFrom(*source);
  }
}

void ServerSnap::MergeFrom(const ServerSnap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerSnap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_.MergeFrom(from.player_);
  if (from.packet_sequence() != 0) {
    set_packet_sequence(from.packet_sequence());
  }
}

void ServerSnap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerSnap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSnap::CopyFrom(const ServerSnap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerSnap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSnap::IsInitialized() const {
  return true;
}

void ServerSnap::Swap(ServerSnap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerSnap::InternalSwap(ServerSnap* other) {
  using std::swap;
  player_.InternalSwap(&other->player_);
  swap(packet_sequence_, other->packet_sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerSnap::GetMetadata() const {
  protobuf_t4mp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_t4mp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerSnap

// repeated .ServerSnap.PlayerData player = 1;
int ServerSnap::player_size() const {
  return player_.size();
}
void ServerSnap::clear_player() {
  player_.Clear();
}
const ::ServerSnap_PlayerData& ServerSnap::player(int index) const {
  // @@protoc_insertion_point(field_get:ServerSnap.player)
  return player_.Get(index);
}
::ServerSnap_PlayerData* ServerSnap::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:ServerSnap.player)
  return player_.Mutable(index);
}
::ServerSnap_PlayerData* ServerSnap::add_player() {
  // @@protoc_insertion_point(field_add:ServerSnap.player)
  return player_.Add();
}
::google::protobuf::RepeatedPtrField< ::ServerSnap_PlayerData >*
ServerSnap::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:ServerSnap.player)
  return &player_;
}
const ::google::protobuf::RepeatedPtrField< ::ServerSnap_PlayerData >&
ServerSnap::player() const {
  // @@protoc_insertion_point(field_list:ServerSnap.player)
  return player_;
}

// int32 packet_sequence = 2;
void ServerSnap::clear_packet_sequence() {
  packet_sequence_ = 0;
}
::google::protobuf::int32 ServerSnap::packet_sequence() const {
  // @@protoc_insertion_point(field_get:ServerSnap.packet_sequence)
  return packet_sequence_;
}
void ServerSnap::set_packet_sequence(::google::protobuf::int32 value) {
  
  packet_sequence_ = value;
  // @@protoc_insertion_point(field_set:ServerSnap.packet_sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
