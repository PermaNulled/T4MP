// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4mp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_t4mp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_t4mp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_t4mp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_t4mp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_t4mp_2eproto;
class ConnectAck;
class ConnectAckDefaultTypeInternal;
extern ConnectAckDefaultTypeInternal _ConnectAck_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PlayerSnap;
class PlayerSnapDefaultTypeInternal;
extern PlayerSnapDefaultTypeInternal _PlayerSnap_default_instance_;
class ServerSnap;
class ServerSnapDefaultTypeInternal;
extern ServerSnapDefaultTypeInternal _ServerSnap_default_instance_;
class ServerSnap_PlayerData;
class ServerSnap_PlayerDataDefaultTypeInternal;
extern ServerSnap_PlayerDataDefaultTypeInternal _ServerSnap_PlayerData_default_instance_;
class ServerSnap_PlayerData_WeaponWheel;
class ServerSnap_PlayerData_WeaponWheelDefaultTypeInternal;
extern ServerSnap_PlayerData_WeaponWheelDefaultTypeInternal _ServerSnap_PlayerData_WeaponWheel_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConnectAck* Arena::CreateMaybeMessage<::ConnectAck>(Arena*);
template<> ::Packet* Arena::CreateMaybeMessage<::Packet>(Arena*);
template<> ::PlayerSnap* Arena::CreateMaybeMessage<::PlayerSnap>(Arena*);
template<> ::ServerSnap* Arena::CreateMaybeMessage<::ServerSnap>(Arena*);
template<> ::ServerSnap_PlayerData* Arena::CreateMaybeMessage<::ServerSnap_PlayerData>(Arena*);
template<> ::ServerSnap_PlayerData_WeaponWheel* Arena::CreateMaybeMessage<::ServerSnap_PlayerData_WeaponWheel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Packet_Type : int {
  Packet_Type_invalid = 0,
  Packet_Type_client_connect = 1,
  Packet_Type_server_snap = 2,
  Packet_Type_client_snap = 3,
  Packet_Type_Packet_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Packet_Type_Packet_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Packet_Type_IsValid(int value);
constexpr Packet_Type Packet_Type_Type_MIN = Packet_Type_invalid;
constexpr Packet_Type Packet_Type_Type_MAX = Packet_Type_client_snap;
constexpr int Packet_Type_Type_ARRAYSIZE = Packet_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Packet_Type_descriptor();
template<typename T>
inline const std::string& Packet_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Packet_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Packet_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Packet_Type_descriptor(), enum_t_value);
}
inline bool Packet_Type_Parse(
    const std::string& name, Packet_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Packet_Type>(
    Packet_Type_descriptor(), name, value);
}
// ===================================================================

class Packet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t4mp_2eproto);
    return ::descriptor_table_t4mp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Packet_Type Type;
  static constexpr Type invalid =
    Packet_Type_invalid;
  static constexpr Type client_connect =
    Packet_Type_client_connect;
  static constexpr Type server_snap =
    Packet_Type_server_snap;
  static constexpr Type client_snap =
    Packet_Type_client_snap;
  static inline bool Type_IsValid(int value) {
    return Packet_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Packet_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Packet_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Packet_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Packet_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Packet_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Packet_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnapshotFieldNumber = 2,
    kServerSnapshotFieldNumber = 3,
    kConnectAckFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // .PlayerSnap player_snapshot = 2;
  bool has_player_snapshot() const;
  private:
  bool _internal_has_player_snapshot() const;
  public:
  void clear_player_snapshot();
  const ::PlayerSnap& player_snapshot() const;
  ::PlayerSnap* release_player_snapshot();
  ::PlayerSnap* mutable_player_snapshot();
  void set_allocated_player_snapshot(::PlayerSnap* player_snapshot);
  private:
  const ::PlayerSnap& _internal_player_snapshot() const;
  ::PlayerSnap* _internal_mutable_player_snapshot();
  public:

  // .ServerSnap server_snapshot = 3;
  bool has_server_snapshot() const;
  private:
  bool _internal_has_server_snapshot() const;
  public:
  void clear_server_snapshot();
  const ::ServerSnap& server_snapshot() const;
  ::ServerSnap* release_server_snapshot();
  ::ServerSnap* mutable_server_snapshot();
  void set_allocated_server_snapshot(::ServerSnap* server_snapshot);
  private:
  const ::ServerSnap& _internal_server_snapshot() const;
  ::ServerSnap* _internal_mutable_server_snapshot();
  public:

  // .ConnectAck connect_ack = 4;
  bool has_connect_ack() const;
  private:
  bool _internal_has_connect_ack() const;
  public:
  void clear_connect_ack();
  const ::ConnectAck& connect_ack() const;
  ::ConnectAck* release_connect_ack();
  ::ConnectAck* mutable_connect_ack();
  void set_allocated_connect_ack(::ConnectAck* connect_ack);
  private:
  const ::ConnectAck& _internal_connect_ack() const;
  ::ConnectAck* _internal_mutable_connect_ack();
  public:

  // .Packet.Type type = 1;
  void clear_type();
  ::Packet_Type type() const;
  void set_type(::Packet_Type value);
  private:
  ::Packet_Type _internal_type() const;
  void _internal_set_type(::Packet_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Packet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PlayerSnap* player_snapshot_;
  ::ServerSnap* server_snapshot_;
  ::ConnectAck* connect_ack_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_t4mp_2eproto;
};
// -------------------------------------------------------------------

class ConnectAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectAck) */ {
 public:
  ConnectAck();
  virtual ~ConnectAck();

  ConnectAck(const ConnectAck& from);
  ConnectAck(ConnectAck&& from) noexcept
    : ConnectAck() {
    *this = ::std::move(from);
  }

  inline ConnectAck& operator=(const ConnectAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectAck& operator=(ConnectAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectAck* internal_default_instance() {
    return reinterpret_cast<const ConnectAck*>(
               &_ConnectAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectAck& a, ConnectAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectAck* New() const final {
    return CreateMaybeMessage<ConnectAck>(nullptr);
  }

  ConnectAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectAck& from);
  void MergeFrom(const ConnectAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t4mp_2eproto);
    return ::descriptor_table_t4mp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_t4mp_2eproto;
};
// -------------------------------------------------------------------

class PlayerSnap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerSnap) */ {
 public:
  PlayerSnap();
  virtual ~PlayerSnap();

  PlayerSnap(const PlayerSnap& from);
  PlayerSnap(PlayerSnap&& from) noexcept
    : PlayerSnap() {
    *this = ::std::move(from);
  }

  inline PlayerSnap& operator=(const PlayerSnap& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSnap& operator=(PlayerSnap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerSnap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSnap* internal_default_instance() {
    return reinterpret_cast<const PlayerSnap*>(
               &_PlayerSnap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerSnap& a, PlayerSnap& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSnap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerSnap* New() const final {
    return CreateMaybeMessage<PlayerSnap>(nullptr);
  }

  PlayerSnap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSnap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerSnap& from);
  void MergeFrom(const PlayerSnap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSnap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerSnap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t4mp_2eproto);
    return ::descriptor_table_t4mp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kViewXFieldNumber = 4,
    kViewYFieldNumber = 5,
    kWalkForwardFieldNumber = 6,
    kWalkBackwardFieldNumber = 7,
    kWalkLeftFieldNumber = 8,
    kWalkRightFieldNumber = 9,
    kJumpFieldNumber = 10,
    kCrouchFieldNumber = 11,
    kFireFieldNumber = 12,
    kFireHoldFieldNumber = 13,
    kFireHoldTimeFieldNumber = 14,
    kFireReleaseTimeFieldNumber = 16,
    kWeaponSwitchFieldNumber = 17,
    kWeaponSwitchTimeFieldNumber = 18,
    kFireReleaseFieldNumber = 15,
    kModifyWeaponFieldNumber = 21,
    kWeaponSlotFieldNumber = 19,
    kPacketSequenceFieldNumber = 20,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float ViewX = 4;
  void clear_viewx();
  float viewx() const;
  void set_viewx(float value);
  private:
  float _internal_viewx() const;
  void _internal_set_viewx(float value);
  public:

  // float ViewY = 5;
  void clear_viewy();
  float viewy() const;
  void set_viewy(float value);
  private:
  float _internal_viewy() const;
  void _internal_set_viewy(float value);
  public:

  // bool Walk_forward = 6;
  void clear_walk_forward();
  bool walk_forward() const;
  void set_walk_forward(bool value);
  private:
  bool _internal_walk_forward() const;
  void _internal_set_walk_forward(bool value);
  public:

  // bool Walk_backward = 7;
  void clear_walk_backward();
  bool walk_backward() const;
  void set_walk_backward(bool value);
  private:
  bool _internal_walk_backward() const;
  void _internal_set_walk_backward(bool value);
  public:

  // bool Walk_left = 8;
  void clear_walk_left();
  bool walk_left() const;
  void set_walk_left(bool value);
  private:
  bool _internal_walk_left() const;
  void _internal_set_walk_left(bool value);
  public:

  // bool Walk_right = 9;
  void clear_walk_right();
  bool walk_right() const;
  void set_walk_right(bool value);
  private:
  bool _internal_walk_right() const;
  void _internal_set_walk_right(bool value);
  public:

  // bool Jump = 10;
  void clear_jump();
  bool jump() const;
  void set_jump(bool value);
  private:
  bool _internal_jump() const;
  void _internal_set_jump(bool value);
  public:

  // bool Crouch = 11;
  void clear_crouch();
  bool crouch() const;
  void set_crouch(bool value);
  private:
  bool _internal_crouch() const;
  void _internal_set_crouch(bool value);
  public:

  // bool Fire = 12;
  void clear_fire();
  bool fire() const;
  void set_fire(bool value);
  private:
  bool _internal_fire() const;
  void _internal_set_fire(bool value);
  public:

  // bool Fire_hold = 13;
  void clear_fire_hold();
  bool fire_hold() const;
  void set_fire_hold(bool value);
  private:
  bool _internal_fire_hold() const;
  void _internal_set_fire_hold(bool value);
  public:

  // float Fire_hold_time = 14;
  void clear_fire_hold_time();
  float fire_hold_time() const;
  void set_fire_hold_time(float value);
  private:
  float _internal_fire_hold_time() const;
  void _internal_set_fire_hold_time(float value);
  public:

  // float Fire_release_time = 16;
  void clear_fire_release_time();
  float fire_release_time() const;
  void set_fire_release_time(float value);
  private:
  float _internal_fire_release_time() const;
  void _internal_set_fire_release_time(float value);
  public:

  // int32 Weapon_switch = 17;
  void clear_weapon_switch();
  ::PROTOBUF_NAMESPACE_ID::int32 weapon_switch() const;
  void set_weapon_switch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weapon_switch() const;
  void _internal_set_weapon_switch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float Weapon_switch_time = 18;
  void clear_weapon_switch_time();
  float weapon_switch_time() const;
  void set_weapon_switch_time(float value);
  private:
  float _internal_weapon_switch_time() const;
  void _internal_set_weapon_switch_time(float value);
  public:

  // bool Fire_release = 15;
  void clear_fire_release();
  bool fire_release() const;
  void set_fire_release(bool value);
  private:
  bool _internal_fire_release() const;
  void _internal_set_fire_release(bool value);
  public:

  // bool modify_weapon = 21;
  void clear_modify_weapon();
  bool modify_weapon() const;
  void set_modify_weapon(bool value);
  private:
  bool _internal_modify_weapon() const;
  void _internal_set_modify_weapon(bool value);
  public:

  // int32 Weapon_slot = 19;
  void clear_weapon_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 weapon_slot() const;
  void set_weapon_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weapon_slot() const;
  void _internal_set_weapon_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 packet_sequence = 20;
  void clear_packet_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_sequence() const;
  void set_packet_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packet_sequence() const;
  void _internal_set_packet_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerSnap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float viewx_;
  float viewy_;
  bool walk_forward_;
  bool walk_backward_;
  bool walk_left_;
  bool walk_right_;
  bool jump_;
  bool crouch_;
  bool fire_;
  bool fire_hold_;
  float fire_hold_time_;
  float fire_release_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 weapon_switch_;
  float weapon_switch_time_;
  bool fire_release_;
  bool modify_weapon_;
  ::PROTOBUF_NAMESPACE_ID::int32 weapon_slot_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_t4mp_2eproto;
};
// -------------------------------------------------------------------

class ServerSnap_PlayerData_WeaponWheel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerSnap.PlayerData.WeaponWheel) */ {
 public:
  ServerSnap_PlayerData_WeaponWheel();
  virtual ~ServerSnap_PlayerData_WeaponWheel();

  ServerSnap_PlayerData_WeaponWheel(const ServerSnap_PlayerData_WeaponWheel& from);
  ServerSnap_PlayerData_WeaponWheel(ServerSnap_PlayerData_WeaponWheel&& from) noexcept
    : ServerSnap_PlayerData_WeaponWheel() {
    *this = ::std::move(from);
  }

  inline ServerSnap_PlayerData_WeaponWheel& operator=(const ServerSnap_PlayerData_WeaponWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSnap_PlayerData_WeaponWheel& operator=(ServerSnap_PlayerData_WeaponWheel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerSnap_PlayerData_WeaponWheel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerSnap_PlayerData_WeaponWheel* internal_default_instance() {
    return reinterpret_cast<const ServerSnap_PlayerData_WeaponWheel*>(
               &_ServerSnap_PlayerData_WeaponWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerSnap_PlayerData_WeaponWheel& a, ServerSnap_PlayerData_WeaponWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSnap_PlayerData_WeaponWheel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerSnap_PlayerData_WeaponWheel* New() const final {
    return CreateMaybeMessage<ServerSnap_PlayerData_WeaponWheel>(nullptr);
  }

  ServerSnap_PlayerData_WeaponWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerSnap_PlayerData_WeaponWheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerSnap_PlayerData_WeaponWheel& from);
  void MergeFrom(const ServerSnap_PlayerData_WeaponWheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSnap_PlayerData_WeaponWheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerSnap.PlayerData.WeaponWheel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t4mp_2eproto);
    return ::descriptor_table_t4mp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBowNormalAmmoFieldNumber = 3,
    kBowExplosiveAmmoFieldNumber = 4,
    kBWarClubFieldNumber = 1,
    kBHasBowFieldNumber = 2,
    kBHasTekBowFieldNumber = 6,
    kBHasSpikeGrenadeFieldNumber = 10,
    kBowPoisonAmmoFieldNumber = 5,
    kTekBowNormalAmmoFieldNumber = 7,
    kTekBowExplosiveAmmoFieldNumber = 8,
    kTekBowPosionAmmoFieldNumber = 9,
    kSpikeGrenadeAmmoFieldNumber = 11,
    kPistolAmmoFieldNumber = 13,
    kShotGunAmmoFieldNumber = 15,
    kBHasPistolFieldNumber = 12,
    kBHasShotGunFieldNumber = 14,
    kBHasFlecheeteFieldNumber = 16,
    kBHasRocketLauncherFieldNumber = 19,
    kFleecheteAmmoFieldNumber = 17,
    kMiniGunAmmoFieldNumber = 18,
    kRocketAmmo1FieldNumber = 20,
    kRocketAmmo2FieldNumber = 21,
    kRocketAmmo3FieldNumber = 22,
    kPlasmaAmmo1FieldNumber = 24,
    kPlasmaAmmo2FieldNumber = 25,
    kPlasmaAmmo3FieldNumber = 26,
    kBHasPlasmaCannonFieldNumber = 23,
    kBHasFlameThrowerFieldNumber = 27,
    kBHasSpiderMineFieldNumber = 29,
    kBHasGravityGunFieldNumber = 31,
    kFlameThrowerAmmoFieldNumber = 28,
    kSpiderMineAmmoFieldNumber = 30,
    kGravityGunAmmoFieldNumber = 32,
    kGravityGunAmmo2FieldNumber = 33,
    kDarkMatterAmmoFieldNumber = 35,
    kBHasDarkMatterFieldNumber = 34,
    kBHasCrossBowFieldNumber = 36,
    kCrossBowNormalAmmoFieldNumber = 37,
    kCrossBowExplosiveAmmoFieldNumber = 38,
    kCrossBowPoisonAmmoFieldNumber = 39,
  };
  // int32 bow_Normal_Ammo = 3;
  void clear_bow_normal_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 bow_normal_ammo() const;
  void set_bow_normal_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bow_normal_ammo() const;
  void _internal_set_bow_normal_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bow_Explosive_Ammo = 4;
  void clear_bow_explosive_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 bow_explosive_ammo() const;
  void set_bow_explosive_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bow_explosive_ammo() const;
  void _internal_set_bow_explosive_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bWarClub = 1;
  void clear_bwarclub();
  bool bwarclub() const;
  void set_bwarclub(bool value);
  private:
  bool _internal_bwarclub() const;
  void _internal_set_bwarclub(bool value);
  public:

  // bool bHas_Bow = 2;
  void clear_bhas_bow();
  bool bhas_bow() const;
  void set_bhas_bow(bool value);
  private:
  bool _internal_bhas_bow() const;
  void _internal_set_bhas_bow(bool value);
  public:

  // bool bHas_TekBow = 6;
  void clear_bhas_tekbow();
  bool bhas_tekbow() const;
  void set_bhas_tekbow(bool value);
  private:
  bool _internal_bhas_tekbow() const;
  void _internal_set_bhas_tekbow(bool value);
  public:

  // bool bHas_SpikeGrenade = 10;
  void clear_bhas_spikegrenade();
  bool bhas_spikegrenade() const;
  void set_bhas_spikegrenade(bool value);
  private:
  bool _internal_bhas_spikegrenade() const;
  void _internal_set_bhas_spikegrenade(bool value);
  public:

  // int32 bow_Poison_Ammo = 5;
  void clear_bow_poison_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 bow_poison_ammo() const;
  void set_bow_poison_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bow_poison_ammo() const;
  void _internal_set_bow_poison_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TekBow_NormalAmmo = 7;
  void clear_tekbow_normalammo();
  ::PROTOBUF_NAMESPACE_ID::int32 tekbow_normalammo() const;
  void set_tekbow_normalammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tekbow_normalammo() const;
  void _internal_set_tekbow_normalammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TekBow_ExplosiveAmmo = 8;
  void clear_tekbow_explosiveammo();
  ::PROTOBUF_NAMESPACE_ID::int32 tekbow_explosiveammo() const;
  void set_tekbow_explosiveammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tekbow_explosiveammo() const;
  void _internal_set_tekbow_explosiveammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TekBow_PosionAmmo = 9;
  void clear_tekbow_posionammo();
  ::PROTOBUF_NAMESPACE_ID::int32 tekbow_posionammo() const;
  void set_tekbow_posionammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tekbow_posionammo() const;
  void _internal_set_tekbow_posionammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SpikeGrenade_Ammo = 11;
  void clear_spikegrenade_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 spikegrenade_ammo() const;
  void set_spikegrenade_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spikegrenade_ammo() const;
  void _internal_set_spikegrenade_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Pistol_Ammo = 13;
  void clear_pistol_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 pistol_ammo() const;
  void set_pistol_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pistol_ammo() const;
  void _internal_set_pistol_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ShotGun_Ammo = 15;
  void clear_shotgun_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 shotgun_ammo() const;
  void set_shotgun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shotgun_ammo() const;
  void _internal_set_shotgun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bHas_Pistol = 12;
  void clear_bhas_pistol();
  bool bhas_pistol() const;
  void set_bhas_pistol(bool value);
  private:
  bool _internal_bhas_pistol() const;
  void _internal_set_bhas_pistol(bool value);
  public:

  // bool bHas_ShotGun = 14;
  void clear_bhas_shotgun();
  bool bhas_shotgun() const;
  void set_bhas_shotgun(bool value);
  private:
  bool _internal_bhas_shotgun() const;
  void _internal_set_bhas_shotgun(bool value);
  public:

  // bool bHas_Flecheete = 16;
  void clear_bhas_flecheete();
  bool bhas_flecheete() const;
  void set_bhas_flecheete(bool value);
  private:
  bool _internal_bhas_flecheete() const;
  void _internal_set_bhas_flecheete(bool value);
  public:

  // bool bHas_RocketLauncher = 19;
  void clear_bhas_rocketlauncher();
  bool bhas_rocketlauncher() const;
  void set_bhas_rocketlauncher(bool value);
  private:
  bool _internal_bhas_rocketlauncher() const;
  void _internal_set_bhas_rocketlauncher(bool value);
  public:

  // int32 Fleechete_Ammo = 17;
  void clear_fleechete_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 fleechete_ammo() const;
  void set_fleechete_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fleechete_ammo() const;
  void _internal_set_fleechete_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MiniGun_Ammo = 18;
  void clear_minigun_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 minigun_ammo() const;
  void set_minigun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minigun_ammo() const;
  void _internal_set_minigun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Rocket_Ammo1 = 20;
  void clear_rocket_ammo1();
  ::PROTOBUF_NAMESPACE_ID::int32 rocket_ammo1() const;
  void set_rocket_ammo1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rocket_ammo1() const;
  void _internal_set_rocket_ammo1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Rocket_Ammo2 = 21;
  void clear_rocket_ammo2();
  ::PROTOBUF_NAMESPACE_ID::int32 rocket_ammo2() const;
  void set_rocket_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rocket_ammo2() const;
  void _internal_set_rocket_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Rocket_Ammo3 = 22;
  void clear_rocket_ammo3();
  ::PROTOBUF_NAMESPACE_ID::int32 rocket_ammo3() const;
  void set_rocket_ammo3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rocket_ammo3() const;
  void _internal_set_rocket_ammo3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Plasma_Ammo1 = 24;
  void clear_plasma_ammo1();
  ::PROTOBUF_NAMESPACE_ID::int32 plasma_ammo1() const;
  void set_plasma_ammo1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plasma_ammo1() const;
  void _internal_set_plasma_ammo1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Plasma_Ammo2 = 25;
  void clear_plasma_ammo2();
  ::PROTOBUF_NAMESPACE_ID::int32 plasma_ammo2() const;
  void set_plasma_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plasma_ammo2() const;
  void _internal_set_plasma_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Plasma_Ammo3 = 26;
  void clear_plasma_ammo3();
  ::PROTOBUF_NAMESPACE_ID::int32 plasma_ammo3() const;
  void set_plasma_ammo3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plasma_ammo3() const;
  void _internal_set_plasma_ammo3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bHas_PlasmaCannon = 23;
  void clear_bhas_plasmacannon();
  bool bhas_plasmacannon() const;
  void set_bhas_plasmacannon(bool value);
  private:
  bool _internal_bhas_plasmacannon() const;
  void _internal_set_bhas_plasmacannon(bool value);
  public:

  // bool bHas_FlameThrower = 27;
  void clear_bhas_flamethrower();
  bool bhas_flamethrower() const;
  void set_bhas_flamethrower(bool value);
  private:
  bool _internal_bhas_flamethrower() const;
  void _internal_set_bhas_flamethrower(bool value);
  public:

  // bool bHas_SpiderMine = 29;
  void clear_bhas_spidermine();
  bool bhas_spidermine() const;
  void set_bhas_spidermine(bool value);
  private:
  bool _internal_bhas_spidermine() const;
  void _internal_set_bhas_spidermine(bool value);
  public:

  // bool bHas_GravityGun = 31;
  void clear_bhas_gravitygun();
  bool bhas_gravitygun() const;
  void set_bhas_gravitygun(bool value);
  private:
  bool _internal_bhas_gravitygun() const;
  void _internal_set_bhas_gravitygun(bool value);
  public:

  // int32 FlameThrower_Ammo = 28;
  void clear_flamethrower_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 flamethrower_ammo() const;
  void set_flamethrower_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flamethrower_ammo() const;
  void _internal_set_flamethrower_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SpiderMine_Ammo = 30;
  void clear_spidermine_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 spidermine_ammo() const;
  void set_spidermine_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spidermine_ammo() const;
  void _internal_set_spidermine_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 GravityGun_Ammo = 32;
  void clear_gravitygun_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 gravitygun_ammo() const;
  void set_gravitygun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gravitygun_ammo() const;
  void _internal_set_gravitygun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 GravityGun_Ammo2 = 33;
  void clear_gravitygun_ammo2();
  ::PROTOBUF_NAMESPACE_ID::int32 gravitygun_ammo2() const;
  void set_gravitygun_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gravitygun_ammo2() const;
  void _internal_set_gravitygun_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DarkMatter_Ammo = 35;
  void clear_darkmatter_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 darkmatter_ammo() const;
  void set_darkmatter_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_darkmatter_ammo() const;
  void _internal_set_darkmatter_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bHas_DarkMatter = 34;
  void clear_bhas_darkmatter();
  bool bhas_darkmatter() const;
  void set_bhas_darkmatter(bool value);
  private:
  bool _internal_bhas_darkmatter() const;
  void _internal_set_bhas_darkmatter(bool value);
  public:

  // bool bHas_CrossBow = 36;
  void clear_bhas_crossbow();
  bool bhas_crossbow() const;
  void set_bhas_crossbow(bool value);
  private:
  bool _internal_bhas_crossbow() const;
  void _internal_set_bhas_crossbow(bool value);
  public:

  // int32 CrossBow_Normal_Ammo = 37;
  void clear_crossbow_normal_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 crossbow_normal_ammo() const;
  void set_crossbow_normal_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crossbow_normal_ammo() const;
  void _internal_set_crossbow_normal_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CrossBow_Explosive_Ammo = 38;
  void clear_crossbow_explosive_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 crossbow_explosive_ammo() const;
  void set_crossbow_explosive_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crossbow_explosive_ammo() const;
  void _internal_set_crossbow_explosive_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CrossBow_Poison_Ammo = 39;
  void clear_crossbow_poison_ammo();
  ::PROTOBUF_NAMESPACE_ID::int32 crossbow_poison_ammo() const;
  void set_crossbow_poison_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crossbow_poison_ammo() const;
  void _internal_set_crossbow_poison_ammo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerSnap.PlayerData.WeaponWheel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 bow_normal_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 bow_explosive_ammo_;
  bool bwarclub_;
  bool bhas_bow_;
  bool bhas_tekbow_;
  bool bhas_spikegrenade_;
  ::PROTOBUF_NAMESPACE_ID::int32 bow_poison_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 tekbow_normalammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 tekbow_explosiveammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 tekbow_posionammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 spikegrenade_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 pistol_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 shotgun_ammo_;
  bool bhas_pistol_;
  bool bhas_shotgun_;
  bool bhas_flecheete_;
  bool bhas_rocketlauncher_;
  ::PROTOBUF_NAMESPACE_ID::int32 fleechete_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 minigun_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 rocket_ammo1_;
  ::PROTOBUF_NAMESPACE_ID::int32 rocket_ammo2_;
  ::PROTOBUF_NAMESPACE_ID::int32 rocket_ammo3_;
  ::PROTOBUF_NAMESPACE_ID::int32 plasma_ammo1_;
  ::PROTOBUF_NAMESPACE_ID::int32 plasma_ammo2_;
  ::PROTOBUF_NAMESPACE_ID::int32 plasma_ammo3_;
  bool bhas_plasmacannon_;
  bool bhas_flamethrower_;
  bool bhas_spidermine_;
  bool bhas_gravitygun_;
  ::PROTOBUF_NAMESPACE_ID::int32 flamethrower_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 spidermine_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 gravitygun_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 gravitygun_ammo2_;
  ::PROTOBUF_NAMESPACE_ID::int32 darkmatter_ammo_;
  bool bhas_darkmatter_;
  bool bhas_crossbow_;
  ::PROTOBUF_NAMESPACE_ID::int32 crossbow_normal_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 crossbow_explosive_ammo_;
  ::PROTOBUF_NAMESPACE_ID::int32 crossbow_poison_ammo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_t4mp_2eproto;
};
// -------------------------------------------------------------------

class ServerSnap_PlayerData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerSnap.PlayerData) */ {
 public:
  ServerSnap_PlayerData();
  virtual ~ServerSnap_PlayerData();

  ServerSnap_PlayerData(const ServerSnap_PlayerData& from);
  ServerSnap_PlayerData(ServerSnap_PlayerData&& from) noexcept
    : ServerSnap_PlayerData() {
    *this = ::std::move(from);
  }

  inline ServerSnap_PlayerData& operator=(const ServerSnap_PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSnap_PlayerData& operator=(ServerSnap_PlayerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerSnap_PlayerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerSnap_PlayerData* internal_default_instance() {
    return reinterpret_cast<const ServerSnap_PlayerData*>(
               &_ServerSnap_PlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerSnap_PlayerData& a, ServerSnap_PlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSnap_PlayerData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerSnap_PlayerData* New() const final {
    return CreateMaybeMessage<ServerSnap_PlayerData>(nullptr);
  }

  ServerSnap_PlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerSnap_PlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerSnap_PlayerData& from);
  void MergeFrom(const ServerSnap_PlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSnap_PlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerSnap.PlayerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t4mp_2eproto);
    return ::descriptor_table_t4mp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerSnap_PlayerData_WeaponWheel WeaponWheel;

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponsFieldNumber = 22,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kViewXFieldNumber = 4,
    kViewYFieldNumber = 5,
    kWalkForwardFieldNumber = 6,
    kWalkBackwardFieldNumber = 7,
    kWalkLeftFieldNumber = 8,
    kWalkRightFieldNumber = 9,
    kJumpFieldNumber = 10,
    kCrouchFieldNumber = 11,
    kFireFieldNumber = 12,
    kFireHoldFieldNumber = 13,
    kFireHoldTimeFieldNumber = 14,
    kFireReleaseTimeFieldNumber = 16,
    kMaxHealthFieldNumber = 17,
    kCurrentHealthFieldNumber = 18,
    kWeaponSwitchFieldNumber = 19,
    kWeaponSwitchTimeFieldNumber = 20,
    kFireReleaseFieldNumber = 15,
    kModifyWeaponFieldNumber = 25,
    kWeaponSlotFieldNumber = 21,
    kIndexFieldNumber = 23,
    kDeathTypeFieldNumber = 24,
  };
  // .ServerSnap.PlayerData.WeaponWheel weapons = 22;
  bool has_weapons() const;
  private:
  bool _internal_has_weapons() const;
  public:
  void clear_weapons();
  const ::ServerSnap_PlayerData_WeaponWheel& weapons() const;
  ::ServerSnap_PlayerData_WeaponWheel* release_weapons();
  ::ServerSnap_PlayerData_WeaponWheel* mutable_weapons();
  void set_allocated_weapons(::ServerSnap_PlayerData_WeaponWheel* weapons);
  private:
  const ::ServerSnap_PlayerData_WeaponWheel& _internal_weapons() const;
  ::ServerSnap_PlayerData_WeaponWheel* _internal_mutable_weapons();
  public:

  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float ViewX = 4;
  void clear_viewx();
  float viewx() const;
  void set_viewx(float value);
  private:
  float _internal_viewx() const;
  void _internal_set_viewx(float value);
  public:

  // float ViewY = 5;
  void clear_viewy();
  float viewy() const;
  void set_viewy(float value);
  private:
  float _internal_viewy() const;
  void _internal_set_viewy(float value);
  public:

  // bool Walk_forward = 6;
  void clear_walk_forward();
  bool walk_forward() const;
  void set_walk_forward(bool value);
  private:
  bool _internal_walk_forward() const;
  void _internal_set_walk_forward(bool value);
  public:

  // bool Walk_backward = 7;
  void clear_walk_backward();
  bool walk_backward() const;
  void set_walk_backward(bool value);
  private:
  bool _internal_walk_backward() const;
  void _internal_set_walk_backward(bool value);
  public:

  // bool Walk_left = 8;
  void clear_walk_left();
  bool walk_left() const;
  void set_walk_left(bool value);
  private:
  bool _internal_walk_left() const;
  void _internal_set_walk_left(bool value);
  public:

  // bool Walk_right = 9;
  void clear_walk_right();
  bool walk_right() const;
  void set_walk_right(bool value);
  private:
  bool _internal_walk_right() const;
  void _internal_set_walk_right(bool value);
  public:

  // bool Jump = 10;
  void clear_jump();
  bool jump() const;
  void set_jump(bool value);
  private:
  bool _internal_jump() const;
  void _internal_set_jump(bool value);
  public:

  // bool Crouch = 11;
  void clear_crouch();
  bool crouch() const;
  void set_crouch(bool value);
  private:
  bool _internal_crouch() const;
  void _internal_set_crouch(bool value);
  public:

  // bool Fire = 12;
  void clear_fire();
  bool fire() const;
  void set_fire(bool value);
  private:
  bool _internal_fire() const;
  void _internal_set_fire(bool value);
  public:

  // bool Fire_hold = 13;
  void clear_fire_hold();
  bool fire_hold() const;
  void set_fire_hold(bool value);
  private:
  bool _internal_fire_hold() const;
  void _internal_set_fire_hold(bool value);
  public:

  // float Fire_hold_time = 14;
  void clear_fire_hold_time();
  float fire_hold_time() const;
  void set_fire_hold_time(float value);
  private:
  float _internal_fire_hold_time() const;
  void _internal_set_fire_hold_time(float value);
  public:

  // float Fire_release_time = 16;
  void clear_fire_release_time();
  float fire_release_time() const;
  void set_fire_release_time(float value);
  private:
  float _internal_fire_release_time() const;
  void _internal_set_fire_release_time(float value);
  public:

  // float Max_health = 17;
  void clear_max_health();
  float max_health() const;
  void set_max_health(float value);
  private:
  float _internal_max_health() const;
  void _internal_set_max_health(float value);
  public:

  // float Current_health = 18;
  void clear_current_health();
  float current_health() const;
  void set_current_health(float value);
  private:
  float _internal_current_health() const;
  void _internal_set_current_health(float value);
  public:

  // int32 Weapon_switch = 19;
  void clear_weapon_switch();
  ::PROTOBUF_NAMESPACE_ID::int32 weapon_switch() const;
  void set_weapon_switch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weapon_switch() const;
  void _internal_set_weapon_switch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float Weapon_switch_time = 20;
  void clear_weapon_switch_time();
  float weapon_switch_time() const;
  void set_weapon_switch_time(float value);
  private:
  float _internal_weapon_switch_time() const;
  void _internal_set_weapon_switch_time(float value);
  public:

  // bool Fire_release = 15;
  void clear_fire_release();
  bool fire_release() const;
  void set_fire_release(bool value);
  private:
  bool _internal_fire_release() const;
  void _internal_set_fire_release(bool value);
  public:

  // bool modify_weapon = 25;
  void clear_modify_weapon();
  bool modify_weapon() const;
  void set_modify_weapon(bool value);
  private:
  bool _internal_modify_weapon() const;
  void _internal_set_modify_weapon(bool value);
  public:

  // int32 Weapon_slot = 21;
  void clear_weapon_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 weapon_slot() const;
  void set_weapon_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weapon_slot() const;
  void _internal_set_weapon_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 23;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 death_type = 24;
  void clear_death_type();
  ::PROTOBUF_NAMESPACE_ID::int32 death_type() const;
  void set_death_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_death_type() const;
  void _internal_set_death_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerSnap.PlayerData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ServerSnap_PlayerData_WeaponWheel* weapons_;
  float x_;
  float y_;
  float z_;
  float viewx_;
  float viewy_;
  bool walk_forward_;
  bool walk_backward_;
  bool walk_left_;
  bool walk_right_;
  bool jump_;
  bool crouch_;
  bool fire_;
  bool fire_hold_;
  float fire_hold_time_;
  float fire_release_time_;
  float max_health_;
  float current_health_;
  ::PROTOBUF_NAMESPACE_ID::int32 weapon_switch_;
  float weapon_switch_time_;
  bool fire_release_;
  bool modify_weapon_;
  ::PROTOBUF_NAMESPACE_ID::int32 weapon_slot_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 death_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_t4mp_2eproto;
};
// -------------------------------------------------------------------

class ServerSnap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerSnap) */ {
 public:
  ServerSnap();
  virtual ~ServerSnap();

  ServerSnap(const ServerSnap& from);
  ServerSnap(ServerSnap&& from) noexcept
    : ServerSnap() {
    *this = ::std::move(from);
  }

  inline ServerSnap& operator=(const ServerSnap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSnap& operator=(ServerSnap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerSnap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerSnap* internal_default_instance() {
    return reinterpret_cast<const ServerSnap*>(
               &_ServerSnap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerSnap& a, ServerSnap& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSnap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerSnap* New() const final {
    return CreateMaybeMessage<ServerSnap>(nullptr);
  }

  ServerSnap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerSnap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerSnap& from);
  void MergeFrom(const ServerSnap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSnap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerSnap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t4mp_2eproto);
    return ::descriptor_table_t4mp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerSnap_PlayerData PlayerData;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kPacketSequenceFieldNumber = 2,
  };
  // repeated .ServerSnap.PlayerData player = 1;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::ServerSnap_PlayerData* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerSnap_PlayerData >*
      mutable_player();
  private:
  const ::ServerSnap_PlayerData& _internal_player(int index) const;
  ::ServerSnap_PlayerData* _internal_add_player();
  public:
  const ::ServerSnap_PlayerData& player(int index) const;
  ::ServerSnap_PlayerData* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerSnap_PlayerData >&
      player() const;

  // int32 packet_sequence = 2;
  void clear_packet_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_sequence() const;
  void set_packet_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packet_sequence() const;
  void _internal_set_packet_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerSnap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerSnap_PlayerData > player_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_t4mp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// .Packet.Type type = 1;
inline void Packet::clear_type() {
  type_ = 0;
}
inline ::Packet_Type Packet::_internal_type() const {
  return static_cast< ::Packet_Type >(type_);
}
inline ::Packet_Type Packet::type() const {
  // @@protoc_insertion_point(field_get:Packet.type)
  return _internal_type();
}
inline void Packet::_internal_set_type(::Packet_Type value) {
  
  type_ = value;
}
inline void Packet::set_type(::Packet_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Packet.type)
}

// .PlayerSnap player_snapshot = 2;
inline bool Packet::_internal_has_player_snapshot() const {
  return this != internal_default_instance() && player_snapshot_ != nullptr;
}
inline bool Packet::has_player_snapshot() const {
  return _internal_has_player_snapshot();
}
inline void Packet::clear_player_snapshot() {
  if (GetArenaNoVirtual() == nullptr && player_snapshot_ != nullptr) {
    delete player_snapshot_;
  }
  player_snapshot_ = nullptr;
}
inline const ::PlayerSnap& Packet::_internal_player_snapshot() const {
  const ::PlayerSnap* p = player_snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlayerSnap*>(
      &::_PlayerSnap_default_instance_);
}
inline const ::PlayerSnap& Packet::player_snapshot() const {
  // @@protoc_insertion_point(field_get:Packet.player_snapshot)
  return _internal_player_snapshot();
}
inline ::PlayerSnap* Packet::release_player_snapshot() {
  // @@protoc_insertion_point(field_release:Packet.player_snapshot)
  
  ::PlayerSnap* temp = player_snapshot_;
  player_snapshot_ = nullptr;
  return temp;
}
inline ::PlayerSnap* Packet::_internal_mutable_player_snapshot() {
  
  if (player_snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerSnap>(GetArenaNoVirtual());
    player_snapshot_ = p;
  }
  return player_snapshot_;
}
inline ::PlayerSnap* Packet::mutable_player_snapshot() {
  // @@protoc_insertion_point(field_mutable:Packet.player_snapshot)
  return _internal_mutable_player_snapshot();
}
inline void Packet::set_allocated_player_snapshot(::PlayerSnap* player_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_snapshot_;
  }
  if (player_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_snapshot, submessage_arena);
    }
    
  } else {
    
  }
  player_snapshot_ = player_snapshot;
  // @@protoc_insertion_point(field_set_allocated:Packet.player_snapshot)
}

// .ServerSnap server_snapshot = 3;
inline bool Packet::_internal_has_server_snapshot() const {
  return this != internal_default_instance() && server_snapshot_ != nullptr;
}
inline bool Packet::has_server_snapshot() const {
  return _internal_has_server_snapshot();
}
inline void Packet::clear_server_snapshot() {
  if (GetArenaNoVirtual() == nullptr && server_snapshot_ != nullptr) {
    delete server_snapshot_;
  }
  server_snapshot_ = nullptr;
}
inline const ::ServerSnap& Packet::_internal_server_snapshot() const {
  const ::ServerSnap* p = server_snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ServerSnap*>(
      &::_ServerSnap_default_instance_);
}
inline const ::ServerSnap& Packet::server_snapshot() const {
  // @@protoc_insertion_point(field_get:Packet.server_snapshot)
  return _internal_server_snapshot();
}
inline ::ServerSnap* Packet::release_server_snapshot() {
  // @@protoc_insertion_point(field_release:Packet.server_snapshot)
  
  ::ServerSnap* temp = server_snapshot_;
  server_snapshot_ = nullptr;
  return temp;
}
inline ::ServerSnap* Packet::_internal_mutable_server_snapshot() {
  
  if (server_snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServerSnap>(GetArenaNoVirtual());
    server_snapshot_ = p;
  }
  return server_snapshot_;
}
inline ::ServerSnap* Packet::mutable_server_snapshot() {
  // @@protoc_insertion_point(field_mutable:Packet.server_snapshot)
  return _internal_mutable_server_snapshot();
}
inline void Packet::set_allocated_server_snapshot(::ServerSnap* server_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_snapshot_;
  }
  if (server_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_snapshot, submessage_arena);
    }
    
  } else {
    
  }
  server_snapshot_ = server_snapshot;
  // @@protoc_insertion_point(field_set_allocated:Packet.server_snapshot)
}

// .ConnectAck connect_ack = 4;
inline bool Packet::_internal_has_connect_ack() const {
  return this != internal_default_instance() && connect_ack_ != nullptr;
}
inline bool Packet::has_connect_ack() const {
  return _internal_has_connect_ack();
}
inline void Packet::clear_connect_ack() {
  if (GetArenaNoVirtual() == nullptr && connect_ack_ != nullptr) {
    delete connect_ack_;
  }
  connect_ack_ = nullptr;
}
inline const ::ConnectAck& Packet::_internal_connect_ack() const {
  const ::ConnectAck* p = connect_ack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConnectAck*>(
      &::_ConnectAck_default_instance_);
}
inline const ::ConnectAck& Packet::connect_ack() const {
  // @@protoc_insertion_point(field_get:Packet.connect_ack)
  return _internal_connect_ack();
}
inline ::ConnectAck* Packet::release_connect_ack() {
  // @@protoc_insertion_point(field_release:Packet.connect_ack)
  
  ::ConnectAck* temp = connect_ack_;
  connect_ack_ = nullptr;
  return temp;
}
inline ::ConnectAck* Packet::_internal_mutable_connect_ack() {
  
  if (connect_ack_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectAck>(GetArenaNoVirtual());
    connect_ack_ = p;
  }
  return connect_ack_;
}
inline ::ConnectAck* Packet::mutable_connect_ack() {
  // @@protoc_insertion_point(field_mutable:Packet.connect_ack)
  return _internal_mutable_connect_ack();
}
inline void Packet::set_allocated_connect_ack(::ConnectAck* connect_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connect_ack_;
  }
  if (connect_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connect_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_ack, submessage_arena);
    }
    
  } else {
    
  }
  connect_ack_ = connect_ack;
  // @@protoc_insertion_point(field_set_allocated:Packet.connect_ack)
}

// -------------------------------------------------------------------

// ConnectAck

// int32 index = 1;
inline void ConnectAck::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectAck::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectAck::index() const {
  // @@protoc_insertion_point(field_get:ConnectAck.index)
  return _internal_index();
}
inline void ConnectAck::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void ConnectAck::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:ConnectAck.index)
}

// -------------------------------------------------------------------

// PlayerSnap

// float X = 1;
inline void PlayerSnap::clear_x() {
  x_ = 0;
}
inline float PlayerSnap::_internal_x() const {
  return x_;
}
inline float PlayerSnap::x() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.X)
  return _internal_x();
}
inline void PlayerSnap::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerSnap::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.X)
}

// float Y = 2;
inline void PlayerSnap::clear_y() {
  y_ = 0;
}
inline float PlayerSnap::_internal_y() const {
  return y_;
}
inline float PlayerSnap::y() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Y)
  return _internal_y();
}
inline void PlayerSnap::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerSnap::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Y)
}

// float Z = 3;
inline void PlayerSnap::clear_z() {
  z_ = 0;
}
inline float PlayerSnap::_internal_z() const {
  return z_;
}
inline float PlayerSnap::z() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Z)
  return _internal_z();
}
inline void PlayerSnap::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PlayerSnap::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Z)
}

// float ViewX = 4;
inline void PlayerSnap::clear_viewx() {
  viewx_ = 0;
}
inline float PlayerSnap::_internal_viewx() const {
  return viewx_;
}
inline float PlayerSnap::viewx() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.ViewX)
  return _internal_viewx();
}
inline void PlayerSnap::_internal_set_viewx(float value) {
  
  viewx_ = value;
}
inline void PlayerSnap::set_viewx(float value) {
  _internal_set_viewx(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.ViewX)
}

// float ViewY = 5;
inline void PlayerSnap::clear_viewy() {
  viewy_ = 0;
}
inline float PlayerSnap::_internal_viewy() const {
  return viewy_;
}
inline float PlayerSnap::viewy() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.ViewY)
  return _internal_viewy();
}
inline void PlayerSnap::_internal_set_viewy(float value) {
  
  viewy_ = value;
}
inline void PlayerSnap::set_viewy(float value) {
  _internal_set_viewy(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.ViewY)
}

// bool Walk_forward = 6;
inline void PlayerSnap::clear_walk_forward() {
  walk_forward_ = false;
}
inline bool PlayerSnap::_internal_walk_forward() const {
  return walk_forward_;
}
inline bool PlayerSnap::walk_forward() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Walk_forward)
  return _internal_walk_forward();
}
inline void PlayerSnap::_internal_set_walk_forward(bool value) {
  
  walk_forward_ = value;
}
inline void PlayerSnap::set_walk_forward(bool value) {
  _internal_set_walk_forward(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Walk_forward)
}

// bool Walk_backward = 7;
inline void PlayerSnap::clear_walk_backward() {
  walk_backward_ = false;
}
inline bool PlayerSnap::_internal_walk_backward() const {
  return walk_backward_;
}
inline bool PlayerSnap::walk_backward() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Walk_backward)
  return _internal_walk_backward();
}
inline void PlayerSnap::_internal_set_walk_backward(bool value) {
  
  walk_backward_ = value;
}
inline void PlayerSnap::set_walk_backward(bool value) {
  _internal_set_walk_backward(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Walk_backward)
}

// bool Walk_left = 8;
inline void PlayerSnap::clear_walk_left() {
  walk_left_ = false;
}
inline bool PlayerSnap::_internal_walk_left() const {
  return walk_left_;
}
inline bool PlayerSnap::walk_left() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Walk_left)
  return _internal_walk_left();
}
inline void PlayerSnap::_internal_set_walk_left(bool value) {
  
  walk_left_ = value;
}
inline void PlayerSnap::set_walk_left(bool value) {
  _internal_set_walk_left(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Walk_left)
}

// bool Walk_right = 9;
inline void PlayerSnap::clear_walk_right() {
  walk_right_ = false;
}
inline bool PlayerSnap::_internal_walk_right() const {
  return walk_right_;
}
inline bool PlayerSnap::walk_right() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Walk_right)
  return _internal_walk_right();
}
inline void PlayerSnap::_internal_set_walk_right(bool value) {
  
  walk_right_ = value;
}
inline void PlayerSnap::set_walk_right(bool value) {
  _internal_set_walk_right(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Walk_right)
}

// bool Jump = 10;
inline void PlayerSnap::clear_jump() {
  jump_ = false;
}
inline bool PlayerSnap::_internal_jump() const {
  return jump_;
}
inline bool PlayerSnap::jump() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Jump)
  return _internal_jump();
}
inline void PlayerSnap::_internal_set_jump(bool value) {
  
  jump_ = value;
}
inline void PlayerSnap::set_jump(bool value) {
  _internal_set_jump(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Jump)
}

// bool Crouch = 11;
inline void PlayerSnap::clear_crouch() {
  crouch_ = false;
}
inline bool PlayerSnap::_internal_crouch() const {
  return crouch_;
}
inline bool PlayerSnap::crouch() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Crouch)
  return _internal_crouch();
}
inline void PlayerSnap::_internal_set_crouch(bool value) {
  
  crouch_ = value;
}
inline void PlayerSnap::set_crouch(bool value) {
  _internal_set_crouch(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Crouch)
}

// bool Fire = 12;
inline void PlayerSnap::clear_fire() {
  fire_ = false;
}
inline bool PlayerSnap::_internal_fire() const {
  return fire_;
}
inline bool PlayerSnap::fire() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire)
  return _internal_fire();
}
inline void PlayerSnap::_internal_set_fire(bool value) {
  
  fire_ = value;
}
inline void PlayerSnap::set_fire(bool value) {
  _internal_set_fire(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire)
}

// bool Fire_hold = 13;
inline void PlayerSnap::clear_fire_hold() {
  fire_hold_ = false;
}
inline bool PlayerSnap::_internal_fire_hold() const {
  return fire_hold_;
}
inline bool PlayerSnap::fire_hold() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire_hold)
  return _internal_fire_hold();
}
inline void PlayerSnap::_internal_set_fire_hold(bool value) {
  
  fire_hold_ = value;
}
inline void PlayerSnap::set_fire_hold(bool value) {
  _internal_set_fire_hold(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire_hold)
}

// float Fire_hold_time = 14;
inline void PlayerSnap::clear_fire_hold_time() {
  fire_hold_time_ = 0;
}
inline float PlayerSnap::_internal_fire_hold_time() const {
  return fire_hold_time_;
}
inline float PlayerSnap::fire_hold_time() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire_hold_time)
  return _internal_fire_hold_time();
}
inline void PlayerSnap::_internal_set_fire_hold_time(float value) {
  
  fire_hold_time_ = value;
}
inline void PlayerSnap::set_fire_hold_time(float value) {
  _internal_set_fire_hold_time(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire_hold_time)
}

// bool Fire_release = 15;
inline void PlayerSnap::clear_fire_release() {
  fire_release_ = false;
}
inline bool PlayerSnap::_internal_fire_release() const {
  return fire_release_;
}
inline bool PlayerSnap::fire_release() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire_release)
  return _internal_fire_release();
}
inline void PlayerSnap::_internal_set_fire_release(bool value) {
  
  fire_release_ = value;
}
inline void PlayerSnap::set_fire_release(bool value) {
  _internal_set_fire_release(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire_release)
}

// float Fire_release_time = 16;
inline void PlayerSnap::clear_fire_release_time() {
  fire_release_time_ = 0;
}
inline float PlayerSnap::_internal_fire_release_time() const {
  return fire_release_time_;
}
inline float PlayerSnap::fire_release_time() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Fire_release_time)
  return _internal_fire_release_time();
}
inline void PlayerSnap::_internal_set_fire_release_time(float value) {
  
  fire_release_time_ = value;
}
inline void PlayerSnap::set_fire_release_time(float value) {
  _internal_set_fire_release_time(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Fire_release_time)
}

// int32 Weapon_switch = 17;
inline void PlayerSnap::clear_weapon_switch() {
  weapon_switch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSnap::_internal_weapon_switch() const {
  return weapon_switch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSnap::weapon_switch() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Weapon_switch)
  return _internal_weapon_switch();
}
inline void PlayerSnap::_internal_set_weapon_switch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weapon_switch_ = value;
}
inline void PlayerSnap::set_weapon_switch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weapon_switch(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Weapon_switch)
}

// float Weapon_switch_time = 18;
inline void PlayerSnap::clear_weapon_switch_time() {
  weapon_switch_time_ = 0;
}
inline float PlayerSnap::_internal_weapon_switch_time() const {
  return weapon_switch_time_;
}
inline float PlayerSnap::weapon_switch_time() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Weapon_switch_time)
  return _internal_weapon_switch_time();
}
inline void PlayerSnap::_internal_set_weapon_switch_time(float value) {
  
  weapon_switch_time_ = value;
}
inline void PlayerSnap::set_weapon_switch_time(float value) {
  _internal_set_weapon_switch_time(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Weapon_switch_time)
}

// int32 Weapon_slot = 19;
inline void PlayerSnap::clear_weapon_slot() {
  weapon_slot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSnap::_internal_weapon_slot() const {
  return weapon_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSnap::weapon_slot() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.Weapon_slot)
  return _internal_weapon_slot();
}
inline void PlayerSnap::_internal_set_weapon_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weapon_slot_ = value;
}
inline void PlayerSnap::set_weapon_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weapon_slot(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.Weapon_slot)
}

// int32 packet_sequence = 20;
inline void PlayerSnap::clear_packet_sequence() {
  packet_sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSnap::_internal_packet_sequence() const {
  return packet_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSnap::packet_sequence() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.packet_sequence)
  return _internal_packet_sequence();
}
inline void PlayerSnap::_internal_set_packet_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packet_sequence_ = value;
}
inline void PlayerSnap::set_packet_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packet_sequence(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.packet_sequence)
}

// bool modify_weapon = 21;
inline void PlayerSnap::clear_modify_weapon() {
  modify_weapon_ = false;
}
inline bool PlayerSnap::_internal_modify_weapon() const {
  return modify_weapon_;
}
inline bool PlayerSnap::modify_weapon() const {
  // @@protoc_insertion_point(field_get:PlayerSnap.modify_weapon)
  return _internal_modify_weapon();
}
inline void PlayerSnap::_internal_set_modify_weapon(bool value) {
  
  modify_weapon_ = value;
}
inline void PlayerSnap::set_modify_weapon(bool value) {
  _internal_set_modify_weapon(value);
  // @@protoc_insertion_point(field_set:PlayerSnap.modify_weapon)
}

// -------------------------------------------------------------------

// ServerSnap_PlayerData_WeaponWheel

// bool bWarClub = 1;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bwarclub() {
  bwarclub_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bwarclub() const {
  return bwarclub_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bwarclub() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bWarClub)
  return _internal_bwarclub();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bwarclub(bool value) {
  
  bwarclub_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bwarclub(bool value) {
  _internal_set_bwarclub(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bWarClub)
}

// bool bHas_Bow = 2;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_bow() {
  bhas_bow_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_bow() const {
  return bhas_bow_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_bow() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_Bow)
  return _internal_bhas_bow();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_bow(bool value) {
  
  bhas_bow_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_bow(bool value) {
  _internal_set_bhas_bow(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_Bow)
}

// int32 bow_Normal_Ammo = 3;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bow_normal_ammo() {
  bow_normal_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_bow_normal_ammo() const {
  return bow_normal_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::bow_normal_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bow_Normal_Ammo)
  return _internal_bow_normal_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bow_normal_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bow_normal_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bow_normal_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bow_normal_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bow_Normal_Ammo)
}

// int32 bow_Explosive_Ammo = 4;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bow_explosive_ammo() {
  bow_explosive_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_bow_explosive_ammo() const {
  return bow_explosive_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::bow_explosive_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bow_Explosive_Ammo)
  return _internal_bow_explosive_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bow_explosive_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bow_explosive_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bow_explosive_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bow_explosive_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bow_Explosive_Ammo)
}

// int32 bow_Poison_Ammo = 5;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bow_poison_ammo() {
  bow_poison_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_bow_poison_ammo() const {
  return bow_poison_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::bow_poison_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bow_Poison_Ammo)
  return _internal_bow_poison_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bow_poison_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bow_poison_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bow_poison_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bow_poison_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bow_Poison_Ammo)
}

// bool bHas_TekBow = 6;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_tekbow() {
  bhas_tekbow_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_tekbow() const {
  return bhas_tekbow_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_tekbow() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_TekBow)
  return _internal_bhas_tekbow();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_tekbow(bool value) {
  
  bhas_tekbow_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_tekbow(bool value) {
  _internal_set_bhas_tekbow(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_TekBow)
}

// int32 TekBow_NormalAmmo = 7;
inline void ServerSnap_PlayerData_WeaponWheel::clear_tekbow_normalammo() {
  tekbow_normalammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_tekbow_normalammo() const {
  return tekbow_normalammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::tekbow_normalammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.TekBow_NormalAmmo)
  return _internal_tekbow_normalammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_tekbow_normalammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tekbow_normalammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_tekbow_normalammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tekbow_normalammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.TekBow_NormalAmmo)
}

// int32 TekBow_ExplosiveAmmo = 8;
inline void ServerSnap_PlayerData_WeaponWheel::clear_tekbow_explosiveammo() {
  tekbow_explosiveammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_tekbow_explosiveammo() const {
  return tekbow_explosiveammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::tekbow_explosiveammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.TekBow_ExplosiveAmmo)
  return _internal_tekbow_explosiveammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_tekbow_explosiveammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tekbow_explosiveammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_tekbow_explosiveammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tekbow_explosiveammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.TekBow_ExplosiveAmmo)
}

// int32 TekBow_PosionAmmo = 9;
inline void ServerSnap_PlayerData_WeaponWheel::clear_tekbow_posionammo() {
  tekbow_posionammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_tekbow_posionammo() const {
  return tekbow_posionammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::tekbow_posionammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.TekBow_PosionAmmo)
  return _internal_tekbow_posionammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_tekbow_posionammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tekbow_posionammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_tekbow_posionammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tekbow_posionammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.TekBow_PosionAmmo)
}

// bool bHas_SpikeGrenade = 10;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_spikegrenade() {
  bhas_spikegrenade_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_spikegrenade() const {
  return bhas_spikegrenade_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_spikegrenade() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_SpikeGrenade)
  return _internal_bhas_spikegrenade();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_spikegrenade(bool value) {
  
  bhas_spikegrenade_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_spikegrenade(bool value) {
  _internal_set_bhas_spikegrenade(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_SpikeGrenade)
}

// int32 SpikeGrenade_Ammo = 11;
inline void ServerSnap_PlayerData_WeaponWheel::clear_spikegrenade_ammo() {
  spikegrenade_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_spikegrenade_ammo() const {
  return spikegrenade_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::spikegrenade_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.SpikeGrenade_Ammo)
  return _internal_spikegrenade_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_spikegrenade_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spikegrenade_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_spikegrenade_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spikegrenade_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.SpikeGrenade_Ammo)
}

// bool bHas_Pistol = 12;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_pistol() {
  bhas_pistol_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_pistol() const {
  return bhas_pistol_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_pistol() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_Pistol)
  return _internal_bhas_pistol();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_pistol(bool value) {
  
  bhas_pistol_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_pistol(bool value) {
  _internal_set_bhas_pistol(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_Pistol)
}

// int32 Pistol_Ammo = 13;
inline void ServerSnap_PlayerData_WeaponWheel::clear_pistol_ammo() {
  pistol_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_pistol_ammo() const {
  return pistol_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::pistol_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Pistol_Ammo)
  return _internal_pistol_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_pistol_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pistol_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_pistol_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pistol_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Pistol_Ammo)
}

// bool bHas_ShotGun = 14;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_shotgun() {
  bhas_shotgun_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_shotgun() const {
  return bhas_shotgun_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_shotgun() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_ShotGun)
  return _internal_bhas_shotgun();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_shotgun(bool value) {
  
  bhas_shotgun_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_shotgun(bool value) {
  _internal_set_bhas_shotgun(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_ShotGun)
}

// int32 ShotGun_Ammo = 15;
inline void ServerSnap_PlayerData_WeaponWheel::clear_shotgun_ammo() {
  shotgun_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_shotgun_ammo() const {
  return shotgun_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::shotgun_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.ShotGun_Ammo)
  return _internal_shotgun_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_shotgun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shotgun_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_shotgun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shotgun_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.ShotGun_Ammo)
}

// bool bHas_Flecheete = 16;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_flecheete() {
  bhas_flecheete_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_flecheete() const {
  return bhas_flecheete_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_flecheete() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_Flecheete)
  return _internal_bhas_flecheete();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_flecheete(bool value) {
  
  bhas_flecheete_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_flecheete(bool value) {
  _internal_set_bhas_flecheete(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_Flecheete)
}

// int32 Fleechete_Ammo = 17;
inline void ServerSnap_PlayerData_WeaponWheel::clear_fleechete_ammo() {
  fleechete_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_fleechete_ammo() const {
  return fleechete_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::fleechete_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Fleechete_Ammo)
  return _internal_fleechete_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_fleechete_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fleechete_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_fleechete_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fleechete_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Fleechete_Ammo)
}

// int32 MiniGun_Ammo = 18;
inline void ServerSnap_PlayerData_WeaponWheel::clear_minigun_ammo() {
  minigun_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_minigun_ammo() const {
  return minigun_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::minigun_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.MiniGun_Ammo)
  return _internal_minigun_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_minigun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minigun_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_minigun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minigun_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.MiniGun_Ammo)
}

// bool bHas_RocketLauncher = 19;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_rocketlauncher() {
  bhas_rocketlauncher_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_rocketlauncher() const {
  return bhas_rocketlauncher_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_rocketlauncher() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_RocketLauncher)
  return _internal_bhas_rocketlauncher();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_rocketlauncher(bool value) {
  
  bhas_rocketlauncher_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_rocketlauncher(bool value) {
  _internal_set_bhas_rocketlauncher(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_RocketLauncher)
}

// int32 Rocket_Ammo1 = 20;
inline void ServerSnap_PlayerData_WeaponWheel::clear_rocket_ammo1() {
  rocket_ammo1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_rocket_ammo1() const {
  return rocket_ammo1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::rocket_ammo1() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo1)
  return _internal_rocket_ammo1();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_rocket_ammo1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rocket_ammo1_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_rocket_ammo1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rocket_ammo1(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo1)
}

// int32 Rocket_Ammo2 = 21;
inline void ServerSnap_PlayerData_WeaponWheel::clear_rocket_ammo2() {
  rocket_ammo2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_rocket_ammo2() const {
  return rocket_ammo2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::rocket_ammo2() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo2)
  return _internal_rocket_ammo2();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_rocket_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rocket_ammo2_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_rocket_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rocket_ammo2(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo2)
}

// int32 Rocket_Ammo3 = 22;
inline void ServerSnap_PlayerData_WeaponWheel::clear_rocket_ammo3() {
  rocket_ammo3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_rocket_ammo3() const {
  return rocket_ammo3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::rocket_ammo3() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo3)
  return _internal_rocket_ammo3();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_rocket_ammo3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rocket_ammo3_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_rocket_ammo3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rocket_ammo3(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Rocket_Ammo3)
}

// bool bHas_PlasmaCannon = 23;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_plasmacannon() {
  bhas_plasmacannon_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_plasmacannon() const {
  return bhas_plasmacannon_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_plasmacannon() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_PlasmaCannon)
  return _internal_bhas_plasmacannon();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_plasmacannon(bool value) {
  
  bhas_plasmacannon_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_plasmacannon(bool value) {
  _internal_set_bhas_plasmacannon(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_PlasmaCannon)
}

// int32 Plasma_Ammo1 = 24;
inline void ServerSnap_PlayerData_WeaponWheel::clear_plasma_ammo1() {
  plasma_ammo1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_plasma_ammo1() const {
  return plasma_ammo1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::plasma_ammo1() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo1)
  return _internal_plasma_ammo1();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_plasma_ammo1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plasma_ammo1_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_plasma_ammo1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plasma_ammo1(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo1)
}

// int32 Plasma_Ammo2 = 25;
inline void ServerSnap_PlayerData_WeaponWheel::clear_plasma_ammo2() {
  plasma_ammo2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_plasma_ammo2() const {
  return plasma_ammo2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::plasma_ammo2() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo2)
  return _internal_plasma_ammo2();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_plasma_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plasma_ammo2_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_plasma_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plasma_ammo2(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo2)
}

// int32 Plasma_Ammo3 = 26;
inline void ServerSnap_PlayerData_WeaponWheel::clear_plasma_ammo3() {
  plasma_ammo3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_plasma_ammo3() const {
  return plasma_ammo3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::plasma_ammo3() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo3)
  return _internal_plasma_ammo3();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_plasma_ammo3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plasma_ammo3_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_plasma_ammo3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plasma_ammo3(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.Plasma_Ammo3)
}

// bool bHas_FlameThrower = 27;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_flamethrower() {
  bhas_flamethrower_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_flamethrower() const {
  return bhas_flamethrower_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_flamethrower() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_FlameThrower)
  return _internal_bhas_flamethrower();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_flamethrower(bool value) {
  
  bhas_flamethrower_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_flamethrower(bool value) {
  _internal_set_bhas_flamethrower(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_FlameThrower)
}

// int32 FlameThrower_Ammo = 28;
inline void ServerSnap_PlayerData_WeaponWheel::clear_flamethrower_ammo() {
  flamethrower_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_flamethrower_ammo() const {
  return flamethrower_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::flamethrower_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.FlameThrower_Ammo)
  return _internal_flamethrower_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_flamethrower_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flamethrower_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_flamethrower_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flamethrower_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.FlameThrower_Ammo)
}

// bool bHas_SpiderMine = 29;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_spidermine() {
  bhas_spidermine_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_spidermine() const {
  return bhas_spidermine_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_spidermine() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_SpiderMine)
  return _internal_bhas_spidermine();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_spidermine(bool value) {
  
  bhas_spidermine_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_spidermine(bool value) {
  _internal_set_bhas_spidermine(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_SpiderMine)
}

// int32 SpiderMine_Ammo = 30;
inline void ServerSnap_PlayerData_WeaponWheel::clear_spidermine_ammo() {
  spidermine_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_spidermine_ammo() const {
  return spidermine_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::spidermine_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.SpiderMine_Ammo)
  return _internal_spidermine_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_spidermine_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spidermine_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_spidermine_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spidermine_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.SpiderMine_Ammo)
}

// bool bHas_GravityGun = 31;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_gravitygun() {
  bhas_gravitygun_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_gravitygun() const {
  return bhas_gravitygun_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_gravitygun() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_GravityGun)
  return _internal_bhas_gravitygun();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_gravitygun(bool value) {
  
  bhas_gravitygun_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_gravitygun(bool value) {
  _internal_set_bhas_gravitygun(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_GravityGun)
}

// int32 GravityGun_Ammo = 32;
inline void ServerSnap_PlayerData_WeaponWheel::clear_gravitygun_ammo() {
  gravitygun_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_gravitygun_ammo() const {
  return gravitygun_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::gravitygun_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.GravityGun_Ammo)
  return _internal_gravitygun_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_gravitygun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gravitygun_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_gravitygun_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gravitygun_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.GravityGun_Ammo)
}

// int32 GravityGun_Ammo2 = 33;
inline void ServerSnap_PlayerData_WeaponWheel::clear_gravitygun_ammo2() {
  gravitygun_ammo2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_gravitygun_ammo2() const {
  return gravitygun_ammo2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::gravitygun_ammo2() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.GravityGun_Ammo2)
  return _internal_gravitygun_ammo2();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_gravitygun_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gravitygun_ammo2_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_gravitygun_ammo2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gravitygun_ammo2(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.GravityGun_Ammo2)
}

// bool bHas_DarkMatter = 34;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_darkmatter() {
  bhas_darkmatter_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_darkmatter() const {
  return bhas_darkmatter_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_darkmatter() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_DarkMatter)
  return _internal_bhas_darkmatter();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_darkmatter(bool value) {
  
  bhas_darkmatter_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_darkmatter(bool value) {
  _internal_set_bhas_darkmatter(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_DarkMatter)
}

// int32 DarkMatter_Ammo = 35;
inline void ServerSnap_PlayerData_WeaponWheel::clear_darkmatter_ammo() {
  darkmatter_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_darkmatter_ammo() const {
  return darkmatter_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::darkmatter_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.DarkMatter_Ammo)
  return _internal_darkmatter_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_darkmatter_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  darkmatter_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_darkmatter_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_darkmatter_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.DarkMatter_Ammo)
}

// bool bHas_CrossBow = 36;
inline void ServerSnap_PlayerData_WeaponWheel::clear_bhas_crossbow() {
  bhas_crossbow_ = false;
}
inline bool ServerSnap_PlayerData_WeaponWheel::_internal_bhas_crossbow() const {
  return bhas_crossbow_;
}
inline bool ServerSnap_PlayerData_WeaponWheel::bhas_crossbow() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.bHas_CrossBow)
  return _internal_bhas_crossbow();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_bhas_crossbow(bool value) {
  
  bhas_crossbow_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_bhas_crossbow(bool value) {
  _internal_set_bhas_crossbow(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.bHas_CrossBow)
}

// int32 CrossBow_Normal_Ammo = 37;
inline void ServerSnap_PlayerData_WeaponWheel::clear_crossbow_normal_ammo() {
  crossbow_normal_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_crossbow_normal_ammo() const {
  return crossbow_normal_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::crossbow_normal_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.CrossBow_Normal_Ammo)
  return _internal_crossbow_normal_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_crossbow_normal_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crossbow_normal_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_crossbow_normal_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crossbow_normal_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.CrossBow_Normal_Ammo)
}

// int32 CrossBow_Explosive_Ammo = 38;
inline void ServerSnap_PlayerData_WeaponWheel::clear_crossbow_explosive_ammo() {
  crossbow_explosive_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_crossbow_explosive_ammo() const {
  return crossbow_explosive_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::crossbow_explosive_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.CrossBow_Explosive_Ammo)
  return _internal_crossbow_explosive_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_crossbow_explosive_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crossbow_explosive_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_crossbow_explosive_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crossbow_explosive_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.CrossBow_Explosive_Ammo)
}

// int32 CrossBow_Poison_Ammo = 39;
inline void ServerSnap_PlayerData_WeaponWheel::clear_crossbow_poison_ammo() {
  crossbow_poison_ammo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::_internal_crossbow_poison_ammo() const {
  return crossbow_poison_ammo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData_WeaponWheel::crossbow_poison_ammo() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.WeaponWheel.CrossBow_Poison_Ammo)
  return _internal_crossbow_poison_ammo();
}
inline void ServerSnap_PlayerData_WeaponWheel::_internal_set_crossbow_poison_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crossbow_poison_ammo_ = value;
}
inline void ServerSnap_PlayerData_WeaponWheel::set_crossbow_poison_ammo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crossbow_poison_ammo(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.WeaponWheel.CrossBow_Poison_Ammo)
}

// -------------------------------------------------------------------

// ServerSnap_PlayerData

// float X = 1;
inline void ServerSnap_PlayerData::clear_x() {
  x_ = 0;
}
inline float ServerSnap_PlayerData::_internal_x() const {
  return x_;
}
inline float ServerSnap_PlayerData::x() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.X)
  return _internal_x();
}
inline void ServerSnap_PlayerData::_internal_set_x(float value) {
  
  x_ = value;
}
inline void ServerSnap_PlayerData::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.X)
}

// float Y = 2;
inline void ServerSnap_PlayerData::clear_y() {
  y_ = 0;
}
inline float ServerSnap_PlayerData::_internal_y() const {
  return y_;
}
inline float ServerSnap_PlayerData::y() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Y)
  return _internal_y();
}
inline void ServerSnap_PlayerData::_internal_set_y(float value) {
  
  y_ = value;
}
inline void ServerSnap_PlayerData::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Y)
}

// float Z = 3;
inline void ServerSnap_PlayerData::clear_z() {
  z_ = 0;
}
inline float ServerSnap_PlayerData::_internal_z() const {
  return z_;
}
inline float ServerSnap_PlayerData::z() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Z)
  return _internal_z();
}
inline void ServerSnap_PlayerData::_internal_set_z(float value) {
  
  z_ = value;
}
inline void ServerSnap_PlayerData::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Z)
}

// float ViewX = 4;
inline void ServerSnap_PlayerData::clear_viewx() {
  viewx_ = 0;
}
inline float ServerSnap_PlayerData::_internal_viewx() const {
  return viewx_;
}
inline float ServerSnap_PlayerData::viewx() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.ViewX)
  return _internal_viewx();
}
inline void ServerSnap_PlayerData::_internal_set_viewx(float value) {
  
  viewx_ = value;
}
inline void ServerSnap_PlayerData::set_viewx(float value) {
  _internal_set_viewx(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.ViewX)
}

// float ViewY = 5;
inline void ServerSnap_PlayerData::clear_viewy() {
  viewy_ = 0;
}
inline float ServerSnap_PlayerData::_internal_viewy() const {
  return viewy_;
}
inline float ServerSnap_PlayerData::viewy() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.ViewY)
  return _internal_viewy();
}
inline void ServerSnap_PlayerData::_internal_set_viewy(float value) {
  
  viewy_ = value;
}
inline void ServerSnap_PlayerData::set_viewy(float value) {
  _internal_set_viewy(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.ViewY)
}

// bool Walk_forward = 6;
inline void ServerSnap_PlayerData::clear_walk_forward() {
  walk_forward_ = false;
}
inline bool ServerSnap_PlayerData::_internal_walk_forward() const {
  return walk_forward_;
}
inline bool ServerSnap_PlayerData::walk_forward() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Walk_forward)
  return _internal_walk_forward();
}
inline void ServerSnap_PlayerData::_internal_set_walk_forward(bool value) {
  
  walk_forward_ = value;
}
inline void ServerSnap_PlayerData::set_walk_forward(bool value) {
  _internal_set_walk_forward(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Walk_forward)
}

// bool Walk_backward = 7;
inline void ServerSnap_PlayerData::clear_walk_backward() {
  walk_backward_ = false;
}
inline bool ServerSnap_PlayerData::_internal_walk_backward() const {
  return walk_backward_;
}
inline bool ServerSnap_PlayerData::walk_backward() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Walk_backward)
  return _internal_walk_backward();
}
inline void ServerSnap_PlayerData::_internal_set_walk_backward(bool value) {
  
  walk_backward_ = value;
}
inline void ServerSnap_PlayerData::set_walk_backward(bool value) {
  _internal_set_walk_backward(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Walk_backward)
}

// bool Walk_left = 8;
inline void ServerSnap_PlayerData::clear_walk_left() {
  walk_left_ = false;
}
inline bool ServerSnap_PlayerData::_internal_walk_left() const {
  return walk_left_;
}
inline bool ServerSnap_PlayerData::walk_left() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Walk_left)
  return _internal_walk_left();
}
inline void ServerSnap_PlayerData::_internal_set_walk_left(bool value) {
  
  walk_left_ = value;
}
inline void ServerSnap_PlayerData::set_walk_left(bool value) {
  _internal_set_walk_left(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Walk_left)
}

// bool Walk_right = 9;
inline void ServerSnap_PlayerData::clear_walk_right() {
  walk_right_ = false;
}
inline bool ServerSnap_PlayerData::_internal_walk_right() const {
  return walk_right_;
}
inline bool ServerSnap_PlayerData::walk_right() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Walk_right)
  return _internal_walk_right();
}
inline void ServerSnap_PlayerData::_internal_set_walk_right(bool value) {
  
  walk_right_ = value;
}
inline void ServerSnap_PlayerData::set_walk_right(bool value) {
  _internal_set_walk_right(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Walk_right)
}

// bool Jump = 10;
inline void ServerSnap_PlayerData::clear_jump() {
  jump_ = false;
}
inline bool ServerSnap_PlayerData::_internal_jump() const {
  return jump_;
}
inline bool ServerSnap_PlayerData::jump() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Jump)
  return _internal_jump();
}
inline void ServerSnap_PlayerData::_internal_set_jump(bool value) {
  
  jump_ = value;
}
inline void ServerSnap_PlayerData::set_jump(bool value) {
  _internal_set_jump(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Jump)
}

// bool Crouch = 11;
inline void ServerSnap_PlayerData::clear_crouch() {
  crouch_ = false;
}
inline bool ServerSnap_PlayerData::_internal_crouch() const {
  return crouch_;
}
inline bool ServerSnap_PlayerData::crouch() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Crouch)
  return _internal_crouch();
}
inline void ServerSnap_PlayerData::_internal_set_crouch(bool value) {
  
  crouch_ = value;
}
inline void ServerSnap_PlayerData::set_crouch(bool value) {
  _internal_set_crouch(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Crouch)
}

// bool Fire = 12;
inline void ServerSnap_PlayerData::clear_fire() {
  fire_ = false;
}
inline bool ServerSnap_PlayerData::_internal_fire() const {
  return fire_;
}
inline bool ServerSnap_PlayerData::fire() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire)
  return _internal_fire();
}
inline void ServerSnap_PlayerData::_internal_set_fire(bool value) {
  
  fire_ = value;
}
inline void ServerSnap_PlayerData::set_fire(bool value) {
  _internal_set_fire(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire)
}

// bool Fire_hold = 13;
inline void ServerSnap_PlayerData::clear_fire_hold() {
  fire_hold_ = false;
}
inline bool ServerSnap_PlayerData::_internal_fire_hold() const {
  return fire_hold_;
}
inline bool ServerSnap_PlayerData::fire_hold() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire_hold)
  return _internal_fire_hold();
}
inline void ServerSnap_PlayerData::_internal_set_fire_hold(bool value) {
  
  fire_hold_ = value;
}
inline void ServerSnap_PlayerData::set_fire_hold(bool value) {
  _internal_set_fire_hold(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire_hold)
}

// float Fire_hold_time = 14;
inline void ServerSnap_PlayerData::clear_fire_hold_time() {
  fire_hold_time_ = 0;
}
inline float ServerSnap_PlayerData::_internal_fire_hold_time() const {
  return fire_hold_time_;
}
inline float ServerSnap_PlayerData::fire_hold_time() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire_hold_time)
  return _internal_fire_hold_time();
}
inline void ServerSnap_PlayerData::_internal_set_fire_hold_time(float value) {
  
  fire_hold_time_ = value;
}
inline void ServerSnap_PlayerData::set_fire_hold_time(float value) {
  _internal_set_fire_hold_time(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire_hold_time)
}

// bool Fire_release = 15;
inline void ServerSnap_PlayerData::clear_fire_release() {
  fire_release_ = false;
}
inline bool ServerSnap_PlayerData::_internal_fire_release() const {
  return fire_release_;
}
inline bool ServerSnap_PlayerData::fire_release() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire_release)
  return _internal_fire_release();
}
inline void ServerSnap_PlayerData::_internal_set_fire_release(bool value) {
  
  fire_release_ = value;
}
inline void ServerSnap_PlayerData::set_fire_release(bool value) {
  _internal_set_fire_release(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire_release)
}

// float Fire_release_time = 16;
inline void ServerSnap_PlayerData::clear_fire_release_time() {
  fire_release_time_ = 0;
}
inline float ServerSnap_PlayerData::_internal_fire_release_time() const {
  return fire_release_time_;
}
inline float ServerSnap_PlayerData::fire_release_time() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Fire_release_time)
  return _internal_fire_release_time();
}
inline void ServerSnap_PlayerData::_internal_set_fire_release_time(float value) {
  
  fire_release_time_ = value;
}
inline void ServerSnap_PlayerData::set_fire_release_time(float value) {
  _internal_set_fire_release_time(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Fire_release_time)
}

// float Max_health = 17;
inline void ServerSnap_PlayerData::clear_max_health() {
  max_health_ = 0;
}
inline float ServerSnap_PlayerData::_internal_max_health() const {
  return max_health_;
}
inline float ServerSnap_PlayerData::max_health() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Max_health)
  return _internal_max_health();
}
inline void ServerSnap_PlayerData::_internal_set_max_health(float value) {
  
  max_health_ = value;
}
inline void ServerSnap_PlayerData::set_max_health(float value) {
  _internal_set_max_health(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Max_health)
}

// float Current_health = 18;
inline void ServerSnap_PlayerData::clear_current_health() {
  current_health_ = 0;
}
inline float ServerSnap_PlayerData::_internal_current_health() const {
  return current_health_;
}
inline float ServerSnap_PlayerData::current_health() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Current_health)
  return _internal_current_health();
}
inline void ServerSnap_PlayerData::_internal_set_current_health(float value) {
  
  current_health_ = value;
}
inline void ServerSnap_PlayerData::set_current_health(float value) {
  _internal_set_current_health(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Current_health)
}

// int32 Weapon_switch = 19;
inline void ServerSnap_PlayerData::clear_weapon_switch() {
  weapon_switch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData::_internal_weapon_switch() const {
  return weapon_switch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData::weapon_switch() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Weapon_switch)
  return _internal_weapon_switch();
}
inline void ServerSnap_PlayerData::_internal_set_weapon_switch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weapon_switch_ = value;
}
inline void ServerSnap_PlayerData::set_weapon_switch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weapon_switch(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Weapon_switch)
}

// float Weapon_switch_time = 20;
inline void ServerSnap_PlayerData::clear_weapon_switch_time() {
  weapon_switch_time_ = 0;
}
inline float ServerSnap_PlayerData::_internal_weapon_switch_time() const {
  return weapon_switch_time_;
}
inline float ServerSnap_PlayerData::weapon_switch_time() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Weapon_switch_time)
  return _internal_weapon_switch_time();
}
inline void ServerSnap_PlayerData::_internal_set_weapon_switch_time(float value) {
  
  weapon_switch_time_ = value;
}
inline void ServerSnap_PlayerData::set_weapon_switch_time(float value) {
  _internal_set_weapon_switch_time(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Weapon_switch_time)
}

// int32 Weapon_slot = 21;
inline void ServerSnap_PlayerData::clear_weapon_slot() {
  weapon_slot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData::_internal_weapon_slot() const {
  return weapon_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData::weapon_slot() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.Weapon_slot)
  return _internal_weapon_slot();
}
inline void ServerSnap_PlayerData::_internal_set_weapon_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weapon_slot_ = value;
}
inline void ServerSnap_PlayerData::set_weapon_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weapon_slot(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.Weapon_slot)
}

// .ServerSnap.PlayerData.WeaponWheel weapons = 22;
inline bool ServerSnap_PlayerData::_internal_has_weapons() const {
  return this != internal_default_instance() && weapons_ != nullptr;
}
inline bool ServerSnap_PlayerData::has_weapons() const {
  return _internal_has_weapons();
}
inline void ServerSnap_PlayerData::clear_weapons() {
  if (GetArenaNoVirtual() == nullptr && weapons_ != nullptr) {
    delete weapons_;
  }
  weapons_ = nullptr;
}
inline const ::ServerSnap_PlayerData_WeaponWheel& ServerSnap_PlayerData::_internal_weapons() const {
  const ::ServerSnap_PlayerData_WeaponWheel* p = weapons_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ServerSnap_PlayerData_WeaponWheel*>(
      &::_ServerSnap_PlayerData_WeaponWheel_default_instance_);
}
inline const ::ServerSnap_PlayerData_WeaponWheel& ServerSnap_PlayerData::weapons() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.weapons)
  return _internal_weapons();
}
inline ::ServerSnap_PlayerData_WeaponWheel* ServerSnap_PlayerData::release_weapons() {
  // @@protoc_insertion_point(field_release:ServerSnap.PlayerData.weapons)
  
  ::ServerSnap_PlayerData_WeaponWheel* temp = weapons_;
  weapons_ = nullptr;
  return temp;
}
inline ::ServerSnap_PlayerData_WeaponWheel* ServerSnap_PlayerData::_internal_mutable_weapons() {
  
  if (weapons_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServerSnap_PlayerData_WeaponWheel>(GetArenaNoVirtual());
    weapons_ = p;
  }
  return weapons_;
}
inline ::ServerSnap_PlayerData_WeaponWheel* ServerSnap_PlayerData::mutable_weapons() {
  // @@protoc_insertion_point(field_mutable:ServerSnap.PlayerData.weapons)
  return _internal_mutable_weapons();
}
inline void ServerSnap_PlayerData::set_allocated_weapons(::ServerSnap_PlayerData_WeaponWheel* weapons) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weapons_;
  }
  if (weapons) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weapons = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weapons, submessage_arena);
    }
    
  } else {
    
  }
  weapons_ = weapons;
  // @@protoc_insertion_point(field_set_allocated:ServerSnap.PlayerData.weapons)
}

// int32 index = 23;
inline void ServerSnap_PlayerData::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData::index() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.index)
  return _internal_index();
}
inline void ServerSnap_PlayerData::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void ServerSnap_PlayerData::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.index)
}

// int32 death_type = 24;
inline void ServerSnap_PlayerData::clear_death_type() {
  death_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData::_internal_death_type() const {
  return death_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap_PlayerData::death_type() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.death_type)
  return _internal_death_type();
}
inline void ServerSnap_PlayerData::_internal_set_death_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  death_type_ = value;
}
inline void ServerSnap_PlayerData::set_death_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_death_type(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.death_type)
}

// bool modify_weapon = 25;
inline void ServerSnap_PlayerData::clear_modify_weapon() {
  modify_weapon_ = false;
}
inline bool ServerSnap_PlayerData::_internal_modify_weapon() const {
  return modify_weapon_;
}
inline bool ServerSnap_PlayerData::modify_weapon() const {
  // @@protoc_insertion_point(field_get:ServerSnap.PlayerData.modify_weapon)
  return _internal_modify_weapon();
}
inline void ServerSnap_PlayerData::_internal_set_modify_weapon(bool value) {
  
  modify_weapon_ = value;
}
inline void ServerSnap_PlayerData::set_modify_weapon(bool value) {
  _internal_set_modify_weapon(value);
  // @@protoc_insertion_point(field_set:ServerSnap.PlayerData.modify_weapon)
}

// -------------------------------------------------------------------

// ServerSnap

// repeated .ServerSnap.PlayerData player = 1;
inline int ServerSnap::_internal_player_size() const {
  return player_.size();
}
inline int ServerSnap::player_size() const {
  return _internal_player_size();
}
inline void ServerSnap::clear_player() {
  player_.Clear();
}
inline ::ServerSnap_PlayerData* ServerSnap::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:ServerSnap.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerSnap_PlayerData >*
ServerSnap::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:ServerSnap.player)
  return &player_;
}
inline const ::ServerSnap_PlayerData& ServerSnap::_internal_player(int index) const {
  return player_.Get(index);
}
inline const ::ServerSnap_PlayerData& ServerSnap::player(int index) const {
  // @@protoc_insertion_point(field_get:ServerSnap.player)
  return _internal_player(index);
}
inline ::ServerSnap_PlayerData* ServerSnap::_internal_add_player() {
  return player_.Add();
}
inline ::ServerSnap_PlayerData* ServerSnap::add_player() {
  // @@protoc_insertion_point(field_add:ServerSnap.player)
  return _internal_add_player();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerSnap_PlayerData >&
ServerSnap::player() const {
  // @@protoc_insertion_point(field_list:ServerSnap.player)
  return player_;
}

// int32 packet_sequence = 2;
inline void ServerSnap::clear_packet_sequence() {
  packet_sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap::_internal_packet_sequence() const {
  return packet_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSnap::packet_sequence() const {
  // @@protoc_insertion_point(field_get:ServerSnap.packet_sequence)
  return _internal_packet_sequence();
}
inline void ServerSnap::_internal_set_packet_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packet_sequence_ = value;
}
inline void ServerSnap::set_packet_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packet_sequence(value);
  // @@protoc_insertion_point(field_set:ServerSnap.packet_sequence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Packet_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet_Type>() {
  return ::Packet_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_t4mp_2eproto
